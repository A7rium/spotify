{"baseVals":{"rating":5,"gammaadj":1.9,"echo_zoom":1.169,"wave_mode":5,"modwavealphabyvolume":1,"wave_a":2.929,"wave_scale":1.108,"wave_smoothing":0.9,"wave_mystery":0.4,"modwavealphastart":1.27,"modwavealphaend":1.43,"warpscale":3.138,"zoom":1.023,"warp":0.12262,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.dx_residual=0;a.dy_residual=0;a.bass_thresh=0;","frame_eqs_str":"a.wave_r=.85+.35*Math.sin(.437*a.time+1)+.55*Math.sin(.197*a.time+4);a.wave_g=.85+.35*Math.sin(.544*a.time+2)+.55*Math.sin(.143*a.time+5);a.wave_b=.85+.35*Math.sin(.751*a.time+3)+.55*Math.sin(.117*a.time+6);a.wave_r=sqrt(a.wave_r);a.wave_g=sqrt(a.wave_g);a.wave_b=sqrt(a.wave_b);a.wave_x=.01*randint(100);a.wave_y=.25+.005*randint(100);a.rot+=.01*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*a.time));a.cx+=.21*(.6*Math.sin(.374*a.time)+.4*Math.sin(.294*a.time));a.cy+=.21*(.6*Math.sin(.393*\na.time)+.4*Math.sin(.223*a.time));a.dx+=.003*(.6*Math.sin(.234*a.time)+.4*Math.sin(.277*a.time));a.dy+=.003*(.6*Math.sin(.284*a.time)+.4*Math.sin(.247*a.time));a.decay-=.01*equal(mod(a.frame,6),0);a.dx+=a.dx_residual;a.dy+=a.dy_residual;a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*(.96*(a.bass_thresh-1.3)+1.3);a.dx_residual=.016*equal(a.bass_thresh,2.13)*Math.sin(7*a.time)+(1-equal(a.bass_thresh,2.13))*a.dx_residual;a.dy_residual=.012*equal(a.bass_thresh,2.13)*\nMath.sin(9*a.time)+(1-equal(a.bass_thresh,2.13))*a.dy_residual;a.wave_x-=7*a.dx_residual;a.wave_y-=7*a.dy_residual;a.wave_mystery=.03*a.time;","pixel_eqs_str":"","pixel_eqs":"","warp":" shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = (uv - 0.5);\n  ret_1.x = texture (sampler_main, (tmpvar_2 + 0.5)).x;\n  ret_1.y = texture (sampler_main, ((tmpvar_2 * 0.98) + 0.5)).y;\n  ret_1.z = texture (sampler_main, ((tmpvar_2 * 0.95) + 0.5)).z;\n  vec3 tmpvar_3;\n  tmpvar_3.x = -(ret_1.x);\n  tmpvar_3.y = (ret_1.x - ret_1.y);\n  tmpvar_3.z = (ret_1.y - ret_1.z);\n  ret_1 = (ret_1 + (tmpvar_3 * 0.03));\n  ret_1 = (ret_1 + ((\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)).xyz - 0.5)\n   / 256.0) * 3.0));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_1;\n  ret = tmpvar_4.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  float tmpvar_3;\n  tmpvar_3 = dot (tmpvar_2.xyz, vec3(0.32, 0.49, 0.29));\n  ret_1 = (((vec3(1.1, 0.8, 0.7) * tmpvar_2.x) + (vec3(0.4, 0.6, 0.55) * tmpvar_2.y)) + (vec3(0.7, 0.6, 0.9) * tmpvar_2.z));\n  ret_1 = ((ret_1 * ret_1) * (1.3 + (\n    (clamp (((\n      cos(((tmpvar_3 * 27.0) + 3.0))\n     * 30.0) - 26.0), 0.0, 1.0) * clamp (((\n      cos(((tmpvar_3 * 27.0) + 3.0))\n     * 30.0) - 26.0), 0.0, 1.0))\n   * 5.0)));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_1;\n  ret = tmpvar_4.xyz;\n }"}