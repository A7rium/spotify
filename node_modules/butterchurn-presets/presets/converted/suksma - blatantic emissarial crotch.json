{"baseVals":{"rating":3,"decay":0.96,"echo_zoom":1.007,"echo_orient":1,"wave_mode":2,"wave_dots":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.001,"wave_scale":0.012,"wave_smoothing":0.9,"warpanimspeed":0.01,"warpscale":0.01,"warp":0.01,"wave_r":0.5,"wave_g":0.4,"wave_b":0.3,"ob_size":0,"ob_r":0.11,"ob_b":0.1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_x":31.2,"mv_y":2.28,"mv_l":2.5,"mv_b":0.8,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":5,"textured":1,"rad":1.08925,"tex_zoom":0.93272,"g":1,"b":1,"a":0.8,"r2":1,"b2":0.85,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.ang=.01*Math.sin(.3*a.time);"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":1,"usedots":1},"init_eqs_str":"a.n=0;a.ym=0;a.t1=0;a.scalar=0;a.t3=0;a.timea=0;a.xm=0;a.t2=0;a.timeb=0;","frame_eqs_str":"a.t1=.5;a.t2=.5;a.scalar=5*Math.sin(.3*a.time);a.t3=a.scalar;","point_eqs_str":"a.x=a.t1;a.y=a.t2;a.n=6.283*a.sample;a.timea=.3*a.time+a.t3;a.timeb=.1*a.time+a.t3;a.xm=Math.sin(3*a.n)*Math.sin(5.7*a.n+a.timeb)*Math.sin(11.5*a.n+a.timea)*Math.sin(31*a.n);a.ym=Math.sin(3.5*a.n)*Math.sin(1.1*a.n)*Math.sin(23*a.n+a.timea)*Math.sin(13.3*a.n+a.timeb);a.x+=.1*a.xm;a.y+=.1*a.ym;a.t1=a.x;a.t2=a.y;a.r=.5*Math.tan(a.n)+.5;a.r=Math.min(a.r,1)*above(a.r,0);a.g=.5*Math.tan(a.n+2.1)+.5;a.g=Math.min(a.g,1)*above(a.g,0);a.b=.5*Math.tan(a.n+4.2)+.5;a.b=Math.min(a.b,1)*above(a.b,\n0);"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.ring=0;a.mv_x=64;a.mv_y=48;a.nut=0;a.stp=0;a.stq=0;a.rtp=0;a.rtq=0;a.wvr=0;a.decay=0;a.dcsp=0;","frame_eqs_str":"a.decay=.98;a.zoom=1.001;a.warp=.03;","pixel_eqs_str":"a.ring=2*Math.sin(3.14*a.rad+.3)-1;a.ring=Math.max(a.ring,0);a.ring*=a.ring;a.zoom=1+.04*a.rad;a.sx=1+.3*a.ring;a.sy=1-.3*a.ring;","warp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1 = ((uv * texsize.xy) * 0.08);\n  vec3 tmpvar_2;\n  tmpvar_2 = (texture (sampler_main, (uv - (\n    ((sin(tmpvar_1) / cos(tmpvar_1)) * texsize.zw)\n   * 3.0))).xyz + (vec3(dot (texture (sampler_noise_lq, \n    ((((texsize.xy * texsize_noise_lq.zw).x * uv) * 0.02) + (0.1 * rand_frame).xy)\n  ), vec4(0.32, 0.49, 0.29, 0.0))) / 30.0));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ((mix (tmpvar_2, \n    (1.0 - tmpvar_2.zyx)\n  , vec3(0.01, 0.01, 0.01)) - 0.03) - (0.2 * pow (\n    (1.0 - rad)\n  , 18.0)));\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2.x = rad;\n  tmpvar_2.y = uv.y;\n  ret_1 = (texture (sampler_main, tmpvar_2).xyz + ((texture (sampler_blur1, tmpvar_2).xyz * scale1) + bias1));\n  vec3 tmpvar_3;\n  tmpvar_3.x = (bass * 0.4);\n  tmpvar_3.y = (treb * 0.4);\n  tmpvar_3.z = (mid * 0.4);\n  ret_1 = (ret_1 * (tmpvar_3 * 0.95));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_1;\n  ret = tmpvar_4.xyz;\n }"}