{"baseVals":{"rating":0,"gammaadj":1.9,"echo_zoom":1.169,"wave_mode":7,"modwavealphabyvolume":1,"wave_brighten":0,"wave_a":0,"wave_scale":2.122,"wave_smoothing":0.783,"modwavealphastart":0.99,"modwavealphaend":1.49,"warpanimspeed":0.55,"warpscale":1.66,"zoom":1.003,"warp":0.06621,"wave_r":0.81,"wave_g":0.79,"wave_b":0.77,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":16,"rad":0.80814,"ang":1.25664,"g":1,"b":1,"a":0,"r2":0.42,"g2":0.6,"b2":0.5,"a2":0.01,"border_a":0},"init_eqs_str":"","frame_eqs_str":""},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.dx_residual=0;a.dy_residual=0;a.bass_thresh=0;a.q1=0;","frame_eqs_str":"a.wave_r=.85+.35*Math.sin(.437*a.time+1)+.55*Math.sin(.197*a.time+4);a.wave_g=.85+.35*Math.sin(.544*a.time+2)+.55*Math.sin(.143*a.time+5);a.wave_b=.85+.35*Math.sin(.751*a.time+3)+.55*Math.sin(.117*a.time+6);a.wave_r=sqrt(a.wave_r);a.wave_g=sqrt(a.wave_g);a.wave_b=sqrt(a.wave_b);a.rot+=.01*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*a.time));a.cx+=.21*(.6*Math.sin(.374*a.time)+.4*Math.sin(.294*a.time));a.cy+=.21*(.6*Math.sin(.393*a.time)+.4*Math.sin(.223*a.time));a.dx+=.003*(.6*\nMath.sin(.234*a.time)+.4*Math.sin(.277*a.time));a.dy+=.003*(.6*Math.sin(.284*a.time)+.4*Math.sin(.247*a.time));a.decay-=.01*equal(mod(a.frame,6),0);a.dx+=a.dx_residual;a.dy+=a.dy_residual;a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*(.96*(a.bass_thresh-1.3)+1.3);a.dx_residual=.016*equal(a.bass_thresh,2.13)*Math.sin(7*a.time)+(1-equal(a.bass_thresh,2.13))*a.dx_residual;a.dy_residual=.012*equal(a.bass_thresh,2.13)*Math.sin(9*a.time)+(1-equal(a.bass_thresh,2.13))*\na.dy_residual;a.wave_x-=7*a.dx_residual;a.wave_y-=7*a.dy_residual;a.wave_mystery=.03*a.time;a.zoom+=.008*(.35*Math.sin(.844*a.time+2)+.55*Math.sin(1.743*a.time+5));a.q1=.03;","pixel_eqs_str":"","pixel_eqs":"","warp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, (uv + ((texture (sampler_main, \n    (mix (uv, uv_orig, vec2(-1.0, -1.0)) + (texsize.zw * vec2(1.0, 3.0)))\n  ).xy - 0.5) * q1)));\n  ret_1 = (tmpvar_2.xyz - (vec3(0.001, 0.001, 0.0) * (\n    (clamp (((tmpvar_2.xyz - 0.5) * 99.0), 0.0, 1.0) * 2.0)\n   - 1.0)));\n  ret_1 = (ret_1 + ((\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)).xyz - 0.5)\n   / 256.0) * 15.0));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1 = texture (sampler_main, uv);\n  vec3 tmpvar_2;\n  tmpvar_2.x = (((tmpvar_1.x * tmpvar_1.y) * 5.0) - 1.0);\n  tmpvar_2.y = ((tmpvar_1.y * tmpvar_1.z) * 5.0);\n  tmpvar_2.z = ((tmpvar_1.z * tmpvar_1.x) * 6.0);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = (tmpvar_2.zyx * 0.37);\n  ret = tmpvar_3.xyz;\n }"}