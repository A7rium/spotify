{"baseVals":{"rating":0,"gammaadj":1,"decay":1,"echo_zoom":0.999797,"echo_alpha":0.5,"wave_mode":7,"wave_brighten":0,"wave_a":0.004538,"wave_scale":0.167026,"wave_smoothing":0,"wave_mystery":0.000001,"modwavealphastart":1,"modwavealphaend":1.000001,"warpscale":0.106584,"zoomexp":4.100456,"warp":0.01,"wave_x":0.95,"wave_y":1,"ob_size":0.005,"ob_r":1,"ob_g":1,"ob_b":1,"ib_size":0,"ib_r":1,"ib_g":1,"ib_b":1,"mv_x":64,"mv_y":48,"mv_l":0,"mv_b":0,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":1,"sides":84,"additive":1,"thickoutline":1,"rad":0.167768,"tex_zoom":0.503296,"r":0,"b":0.2,"a":0.6,"g2":0,"border_a":0},"init_eqs_str":"a.ti=0;a.ti=0;a.ti=0;a.ti=0;a.ti=0;a.ti=0;a.vx=0;a.vy=0;","frame_eqs_str":"a.ti=.3*a.time;a.x=.5+.34*Math.sin(a.ti);a.y=.5+.34*Math.cos(a.ti);a.rad+=a.bass;a.ti=2.3*a.time;a.x+=.1*Math.sin(a.ti);a.y+=.1*Math.cos(a.ti);"},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":1,"samples":41,"usedots":1,"additive":1,"scaling":0.01,"smoothing":0,"g":0},"init_eqs_str":"a.t8=1;a.t1=a.q5;","frame_eqs_str":"","point_eqs_str":"a.x=.001*randint(1001);a.y=.001*randint(1001);a.g=.5*above(.001*randint(1001),.9);a.b=0;a.r=0;"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.tic=0;a.sw=0;a.q12=0;a.meanbass_att=0;a.q1=0;a.q5=0;a.q9=0;a.tin=0;a.lastbeat=0;a.beatrate=0;a.q11=0;a.peakbass_att=0;a.q10=0;a.an=0;a.alt=0;a.volume=0;a.beat=0;a.vol=0;a.sp=0;a.q2=0;a.q7=0;a.q8=0;","frame_eqs_str":"a.volume=.3*(a.bass+a.mid);a.beatrate=equal(a.beatrate,0)+(1-equal(a.beatrate,0))*(below(a.volume,.01)+(1-below(a.volume,.01))*a.beatrate);a.lastbeat+=equal(a.lastbeat,0)*a.time;a.meanbass_att=.05*(19*a.meanbass_att+a.bass_att);a.peakbass_att=Math.max(a.bass_att,a.peakbass_att);a.beat=above(a.volume,.8)*below(a.peakbass_att-a.bass_att,.05*a.peakbass_att)*above(a.time-a.lastbeat,.1+.5*(a.beatrate-.1));a.beatrate=Math.max(.00001<Math.abs(a.beat)?.00001<Math.abs(below(a.time-a.lastbeat,\n2*a.beatrate))?.1*(9*a.beatrate+a.time-a.lastbeat):a.beatrate:a.beatrate,.1);a.peakbass_att=a.beat*a.bass_att+(1-a.beat)*a.peakbass_att*(.96*above(a.time-a.lastbeat,2*a.beatrate)+.996*(1-above(a.time-a.lastbeat,2*a.beatrate)));a.lastbeat=a.beat*a.time+(1-a.beat)*a.lastbeat;a.peakbass_att=Math.max(a.peakbass_att,1.1*a.meanbass_att);a.zoom=1;a.decay=1;a.warp=0;a.wave_a=0;a.tic=Math.min(a.time-a.tin,.1);a.tin=a.time;a.q2=1;a.q1=1;a.vol+=(div(a.alt+a.bass+a.mid,3)-a.vol)*a.tic;a.q5=a.vol*a.vol*a.vol*\n2;a.q8=.5*Math.sin(a.time);a.q9=.5*Math.sin(.75*a.time);a.sw=Math.abs(a.sw-a.beat);a.an+=.5*a.tic*(1-2*a.sw);a.q7=1+1*(pow(a.q8,2)+pow(a.q9,2));a.q10=Math.sin(a.an);a.q11=Math.cos(a.an);a.sp+=a.tic*a.vol*a.vol*.5;a.q12=a.sp;a.monitor=a.q12;","pixel_eqs_str":"","pixel_eqs":"","warp":" shader_body { \n  float conway_1;\n  vec3 ret_2;\n  ret_2 = ((texture (sampler_main, uv_orig).xyz * vec3(0.97, 1.0, 0.97)) - vec3(0.03, 0.0, 0.03));\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_blur1, uv_orig);\n  ret_2.z = (ret_2.z + ((\n    (tmpvar_3.xyz * scale1)\n   + bias1).z * 0.45));\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_blur3, uv_orig);\n  ret_2.x = (ret_2.x + ((\n    ((tmpvar_3.xyz * scale1) + bias1)\n  .z * 0.05) + (\n    ((tmpvar_4.xyz * scale3) + bias3)\n  .z * 0.05)));\n  ret_2.z = (ret_2.z - ret_2.x);\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_pw_main, uv_orig);\n  ret_2.y = clamp (tmpvar_5.y, 0.0, 1.0);\n  conway_1 = (texture (sampler_pw_main, (uv_orig - texsize.zw)).y + texture (sampler_pw_main, (uv_orig + (vec2(0.0, -1.0) * texsize.zw))).y);\n  conway_1 = (conway_1 + texture (sampler_pw_main, (uv_orig + (vec2(1.0, -1.0) * texsize.zw))).y);\n  conway_1 = (conway_1 + texture (sampler_pw_main, (uv_orig + (vec2(-1.0, 0.0) * texsize.zw))).y);\n  conway_1 = (conway_1 + texture (sampler_pw_main, (uv_orig + (vec2(1.0, 0.0) * texsize.zw))).y);\n  conway_1 = (conway_1 + texture (sampler_pw_main, (uv_orig + (vec2(-1.0, 1.0) * texsize.zw))).y);\n  conway_1 = (conway_1 + texture (sampler_pw_main, (uv_orig + (vec2(0.0, 1.0) * texsize.zw))).y);\n  conway_1 = (conway_1 + texture (sampler_pw_main, (uv_orig + texsize.zw)).y);\n  float tmpvar_6;\n  tmpvar_6 = (((q5 * \n    (1.0 - ((tmpvar_3.xyz * scale1) + bias1).y)\n  ) * (1.0 - \n    ((texture (sampler_blur2, uv_orig).xyz * scale2) + bias2)\n  .y)) * (1.0 - (\n    (tmpvar_4.xyz * scale3)\n   + bias3).y));\n  conway_1 = (conway_1 - tmpvar_5.x);\n  if ((conway_1 > 0.0)) {\n    float tmpvar_7;\n    tmpvar_7 = clamp (ret_2.y, 0.0, 1.0);\n    if ((tmpvar_7 == 0.0)) {\n      ret_2.y = (floor((tmpvar_6 * 1.8)) * q1);\n    };\n  };\n  ret_2.y = (ret_2.y - ret_2.x);\n  ret_2 = (ret_2 - (1.0 - q2));\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = ret_2;\n  ret = tmpvar_8.xyz;\n }","comp":" shader_body { \n  vec2 uv3_1;\n  vec2 uvm_2;\n  vec3 ret_3;\n  uvm_2 = (((\n    ((uv - 0.5) * q7)\n   * \n    (1.0/((((1.0 - \n      (rad * 0.1)\n    ) + (q9 * \n      (uv.x - 0.5)\n    )) + (q8 * (uv.y - 0.5)))))\n  ) + 0.5) - 0.5);\n  uvm_2 = (((\n    (q10 * uvm_2)\n   + \n    ((vec2(1.0, -1.0) * q11) * uvm_2.yx)\n  ) * aspect.zw) + 0.5);\n  uvm_2 = (abs((\n    fract(((uvm_2 + q12) * 0.5))\n   - 0.5)) * 2.0);\n  uv3_1 = (((texture (sampler_main, uvm_2).zz - 0.37) * 0.13) + uvm_2);\n  ret_3 = texture (sampler_pw_main, uvm_2).yyy;\n  ret_3 = (pow (mix (vec3(\n    (((texture (sampler_blur1, uv3_1).xyz * scale1) + bias1).z + ((texture (sampler_blur3, uv3_1).xyz * scale3) + bias3).z)\n  ), ret_3, ret_3), vec3(0.5, 1.0, 2.0)) - 0.25);\n  ret_3 = (ret_3 * ((texture (sampler_blur3, uv3_1).xyz * scale3) + bias3).y);\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_3;\n  ret = tmpvar_4.xyz;\n }"}