{"baseVals":{"rating":0,"wrap":0,"wave_a":0.001,"warpanimspeed":5.278,"warpscale":0.01,"zoomexp":1.47412,"zoom":1.0303,"warp":0.01,"ob_size":0.005,"ob_a":1,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":32,"thickoutline":1,"num_inst":13,"r":0,"g":0.5,"g2":0.5,"a2":1,"border_a":0},"init_eqs_str":"a.trans=0;a.q3=0;a.trans=0;a.trans=0;a.trans=0;a.q1=0;a.q2=0;","frame_eqs_str":"a.trans=.00001<Math.abs(equal(a.q3,3))?1:0;a.a=a.trans;a.a2=a.trans;a.border_a=a.trans;a.x=a.q1+.01*randint(15)*a.bass_att*(.00001<Math.abs(equal(randint(2),1))?1:-1);a.y=a.q2+.01*randint(15)*a.bass_att*(.00001<Math.abs(equal(randint(2),1))?1:-1);a.rad=.09+.002*randint(10);"},{"baseVals":{"enabled":1,"sides":32,"thickoutline":1,"num_inst":13,"r":0,"b":0.5,"g2":0,"b2":0.5,"a2":1,"border_a":0},"init_eqs_str":"a.trans=0;a.q3=0;a.trans=0;a.trans=0;a.trans=0;a.q1=0;a.q2=0;","frame_eqs_str":"a.trans=.00001<Math.abs(equal(a.q3,6))?1:0;a.a=a.trans;a.a2=a.trans;a.border_a=a.trans;a.x=a.q1+.01*randint(15)*a.mid_att*(.00001<Math.abs(equal(randint(2),1))?1:-1);a.y=a.q2+.01*randint(15)*a.mid_att*(.00001<Math.abs(equal(randint(2),1))?1:-1);a.rad=.09+.002*randint(10);"},{"baseVals":{"enabled":1,"sides":32,"thickoutline":1,"num_inst":13,"r":0.5,"r2":0.5,"g2":0,"a2":1,"border_a":0},"init_eqs_str":"a.trans=0;a.q3=0;a.trans=0;a.trans=0;a.trans=0;a.q1=0;a.q2=0;","frame_eqs_str":"a.trans=.00001<Math.abs(equal(a.q3,9))?1:0;a.a=a.trans;a.a2=a.trans;a.border_a=a.trans;a.x=a.q1+.01*randint(15)*a.treb_att*(.00001<Math.abs(equal(randint(2),1))?1:-1);a.y=a.q2+.01*randint(15)*a.treb_att*(.00001<Math.abs(equal(randint(2),1))?1:-1);a.rad=.09+.002*randint(10);"},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.count=0;a.q1=0;a.q2=0;a.q3=0;","frame_eqs_str":"a.count=.00001<Math.abs(below(a.count,9))?a.count+1:0;a.q1=.5;a.q2=.5;a.q3=a.count;a.zoom=1+.065*a.bass_att+.05*a.bass;","pixel_eqs_str":"","pixel_eqs":"","warp":" shader_body { \n  vec3 ret_1;\n  ret_1.x = texture (sampler_main, uv).x;\n  ret_1.y = texture (sampler_main, mix (uv_orig, uv, vec2(0.1, 0.1))).y;\n  ret_1.z = texture (sampler_main, mix (uv_orig, uv, vec2(0.2, 0.2))).z;\n  ret_1 = (ret_1 * 0.9);\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ret_1;\n  ret = tmpvar_2.xyz;\n }","comp":"uniform sampler2D sampler_rand00_smalltiled;\n shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = ((texture (sampler_rand00_smalltiled, fract(\n    ((1.0 - ((\n      (texture (sampler_blur2, uv).xyz * scale2)\n     + bias2).yx * 0.6)) + (time * vec2(0.057, 0.036)))\n  )) * (\n    (1.0 + texture (sampler_main, uv).x)\n   + \n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  .y)) * 0.4).xyz;\n  ret = tmpvar_1.xyz;\n }"}