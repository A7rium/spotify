{"baseVals":{"rating":4,"gammaadj":1.98,"decay":0.5,"echo_zoom":0.952,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.002,"wave_scale":0.079,"wave_smoothing":0,"wave_mystery":-0.22,"modwavealphastart":0.81,"modwavealphaend":1.4,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.6,"wave_g":0.5,"wave_b":0,"ob_size":0,"ob_a":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":16,"textured":1,"num_inst":6,"x":0.73,"rad":0.29466,"tex_zoom":1.8751,"r":0.7,"g":0.7,"b":1,"g2":0,"border_b":0,"border_a":0},"init_eqs_str":"a.trig=0;a.q25=0;a.x0=0;a.y0=0;","frame_eqs_str":"a.trig=a.q25;a.a=a.trig*Math.min(a.bass+a.treb-.5,1);a.a2=0*a.trig;a.x0=a.x0*bnot(a.trig)+div(a.trig*randint(100),100);a.y0=a.y0*bnot(a.trig)+div(a.trig*randint(100),100);a.tex_ang=div(randint(20),3);a.rad=.1+div(randint(8),16);a.x=a.x0;a.y=a.y0;a.r=.7+.3*Math.sin(div(a.time,12));a.b=.7+.3*Math.sin(div(a.time,15));a.g=.7+.3*Math.sin(div(a.time,8));a.r2=a.r;a.b2=a.b;a.g2=a.g;"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.sw2=0;a.index2=0;a.q25=0;a.index=0;a.q12=0;a.q18=0;a.q22=0;a.q21=0;a.q13=0;a.sw3=0;a.q15=0;a.q6=0;a.dec_med=0;a.q5=0;a.mindev=0;a.trel=0;a.q9=0;a.t0a=0;a.itrel=0;a.my=0;a.is_beat=0;a.q31=0;a.q24=0;a.dec_slow=0;a.q11=0;a.q10=0;a.sdev=0;a.ma=0;a.q4=0;a.spb=0;a.spb_=0;a.q16=0;a.q26=0;a.avg=0;a.mx=0;a.q19=0;a.beat=0;a.q17=0;a.trel2=0;a.peak=0;a.jmp=0;a.itrel_=0;a.q2=0;a.q27=0;a.q14=0;a.sw1=0;a.tmp=0;a.q3=0;a.t0=0;a.q7=0;a.q28=0;a.q30=0;a.q20=0;a.q8=0;a.avg=1;a.index=randint(8);\na.index2=randint(8);a.ran=1;a.spb_=.3;a.sdev=.1;a.trel2=div(randint(100),100);","frame_eqs_str":"a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.98,div(30,a.fps));a.beat=a.bass+a.mid+a.treb;a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.2+a.avg+a.peak)*above(a.time,a.t0+.1);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,16);a.index2=mod(a.index2+a.is_beat*bnot(a.index),12);a.spb=Math.min(a.t0-a.t0a+.01,2);a.t0a=a.t0;a.spb_=.00001<Math.abs(a.is_beat)?.9*a.spb_+.1*a.spb:a.spb_;\na.mindev=Math.min(Math.min(Math.abs(a.spb-a.spb_),Math.abs(2*a.spb-a.spb_)),Math.abs(a.spb-2*a.spb_));a.sdev=.00001<Math.abs(a.is_beat)?.9*a.sdev+.1*pow(a.mindev+.02,2):a.sdev;a.q20=a.avg;a.q21=a.beat;a.q22=a.peak+.1;a.q24=a.is_beat;a.q27=a.index;a.q28=a.index2;a.trel+=4*div(div(1,a.fps),a.spb_);a.itrel=Math.floor(a.trel);a.q25=above(a.itrel,a.itrel_);a.q30=mod(a.itrel,2);a.itrel_=a.itrel;a.q31=div(a.trel,8)-Math.floor(div(a.trel,8));a.ma+=div(a.peak,a.fps);a.mx=a.mx*a.dec_med+(1-a.dec_med)*Math.cos(a.ma);\na.my=a.my*a.dec_med+(1-a.dec_med)*Math.sin(a.ma+div(a.trel,16));a.q15=a.mx;a.q16=a.my;a.q17=a.ma;a.sw1=.00001<Math.abs(a.sw1)?bnot(a.q24*bnot(randint(10))):a.q24*bnot(randint(20));a.sw2=.00001<Math.abs(a.sw2)?bnot(a.q24*bnot(randint(40))):a.q24*bnot(randint(80));a.sw3=.00001<Math.abs(a.sw3)?bnot(a.q24*bnot(randint(10))):a.q24*bnot(randint(100+1E4*a.sdev));a.q6=Math.sin(div(a.time,15))*Math.sin(div(a.time,27))*.1;a.q10=Math.sin(div(a.time,8));a.q10=a.q10*a.q10*.1;a.q11=1.5+Math.sin(div(a.time,7.8));\na.q12=.00001<Math.abs(below(a.sdev,.02)*bnot(a.q8))?a.q25:1;a.q13=.5+Math.sin(div(a.time,17));a.q19=.4*Math.sin(div(a.time,5.3));a.q3=a.sw1;a.q4=div(.02,a.sdev);a.q5=.4*Math.max(Math.min(4*Math.sin(div(a.trel,64))-3,1),0);a.q7=below(a.sdev,.004)*mod(a.index2,2);a.q2=Math.abs(a.q19)*sqrt(a.q15*a.q15+a.q16*a.q16);a.trel2+=div(.003*a.q22*a.q22,a.fps);a.tmp=Math.sin(a.trel2);a.tmp=10*a.tmp-9;a.q8=a.tmp*above(a.tmp,0)*(div(4,Math.max(a.q22-4,.2))+4);a.q26=above(a.q22,16)*(a.q22-16)*2;a.tmp=div(a.index2,\n6);a.q14=6*Math.abs(a.tmp-Math.floor(a.tmp)-.5)+1;a.tmp=Math.sin(3.14*div(a.trel,4));a.jmp+=8*div(above(a.tmp,.5)*a.tmp,a.fps)*a.sw2;a.q9=a.jmp*equal(a.q14,1)*below(a.sdev,.04)+a.time*above(Math.sin(div(a.q17,23)),.9);a.q18=div(a.tmp*a.tmp,2)*bnot(a.q8)*a.sw3;a.monitor=a.avg;a.rot=.003;a.warp=0;","pixel_eqs_str":"a.zoom=1+.1*(a.q20-1.5)*a.rad;","warp":"float xlat_mutablenoise;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv1;\nvec2 xlat_mutableuv2;\nfloat xlat_mutablezv;\n shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1.x = q15;\n  tmpvar_1.y = q16;\n  xlat_mutableuv1 = (uv - 0.5);\n  vec2 tmpvar_2;\n  tmpvar_2.x = (texture (sampler_main, (uv + vec2(0.002, 0.0))) - texture (sampler_main, (uv - vec2(0.002, 0.0)))).z;\n  tmpvar_2.y = (texture (sampler_main, (uv + vec2(0.0, 0.002))) - texture (sampler_main, (uv - vec2(0.0, 0.002)))).z;\n  xlat_mutablezv = (time * 0.1);\n  xlat_mutableuv2 = ((q11 * xlat_mutableuv1) + (0.04 * time));\n  vec3 tmpvar_3;\n  tmpvar_3.xy = xlat_mutableuv2;\n  tmpvar_3.z = xlat_mutablezv;\n  vec3 tmpvar_4;\n  tmpvar_4.xy = (xlat_mutableuv2 * vec2(2.0, 2.0));\n  tmpvar_4.z = (xlat_mutablezv * 2.0);\n  vec3 tmpvar_5;\n  tmpvar_5.xy = (xlat_mutableuv2 * vec2(4.0, 4.0));\n  tmpvar_5.z = (xlat_mutablezv * 3.0);\n  vec3 tmpvar_6;\n  tmpvar_6.xy = (xlat_mutableuv2 * vec2(8.0, 8.0));\n  tmpvar_6.z = (xlat_mutablezv * 7.0);\n  xlat_mutablenoise = (((\n    (texture (sampler_noisevol_hq, tmpvar_3).z + (texture (sampler_noisevol_hq, tmpvar_4).z / 2.0))\n   + \n    (texture (sampler_noisevol_hq, tmpvar_5).z / 4.0)\n  ) + (texture (sampler_noisevol_hq, tmpvar_6).z / 8.0)) - 0.5);\n  float tmpvar_7;\n  tmpvar_7 = pow (xlat_mutablenoise, q13);\n  xlat_mutablenoise = tmpvar_7;\n  xlat_mutableuv2 = ((xlat_mutableuv1 * (1.0 + \n    (0.5 * q2)\n  )) + (tmpvar_7 * 0.1));\n  float tmpvar_8;\n  tmpvar_8 = ((texture (sampler_blur1, vec2(0.5, 0.5)).xyz * scale1) + bias1).x;\n  vec2 x_9;\n  x_9 = (xlat_mutableuv2 - (tmpvar_1 * q19));\n  vec2 x_10;\n  x_10 = (xlat_mutableuv1 - (0.03 / q22));\n  xlat_mutableret1 = (((0.002 / \n    (sqrt(dot (x_9, x_9)) - (q10 / q22))\n  ) * (0.5 + \n    normalize(roam_cos)\n  ).xyz) + ((0.002 / \n    sqrt(dot (x_10, x_10))\n  ) * clamp (\n    (1.0 - (8.0 * tmpvar_8))\n  , 0.0, 1.0)));\n  xlat_mutableret1 = (((xlat_mutableret1 + \n    (texture (sampler_main, ((xlat_mutableuv1 + 0.5) + (q6 * tmpvar_2))) * 0.96)\n  .xyz) - 0.02) - (tmpvar_8 * 0.1));\n  vec4 tmpvar_11;\n  tmpvar_11.w = 1.0;\n  tmpvar_11.xyz = ((q12 * xlat_mutableret1) + ((1.0 - q12) * texture (sampler_main, uv).xyz));\n  ret = tmpvar_11.xyz;\n }","comp":"float xlat_mutableang2;\nfloat xlat_mutabledist;\nfloat xlat_mutableinten;\nvec3 xlat_mutableret1;\nfloat xlat_mutablesmask;\nfloat xlat_mutablestars;\nvec2 xlat_mutableuv0;\nvec2 xlat_mutableuv2;\nvec2 xlat_mutableuv4;\n shader_body { \n  n = 1;\n  anz = 4;\n  vec2 uv_1;\n  vec3 ret_3;\n  xlat_mutableuv0 = uv;\n  uv_1 = ((uv - 0.5) * aspect.xy);\n  vec2 tmpvar_4;\n  tmpvar_4.x = ((0.1 / rad) + (time * -0.05));\n  tmpvar_4.y = 0.0;\n  uv_1 = (uv_1 / (1.0 + (q8 * \n    sqrt(dot (uv_1, uv_1))\n  )));\n  uv_1 = (uv_1 * (1.0 - (\n    (float(mod (q28, 2.0)))\n   / 4.0)));\n  uv_1 = (uv_1 * (1.0 + (\n    ((texture (sampler_noise_mq, tmpvar_4) - 0.5) * rad)\n  .x * q5)));\n  xlat_mutableret1 = vec3(0.0, 0.0, 0.0);\n  while (true) {\n    if ((n > anz)) {\n      break;\n    };\n    xlat_mutablem = int((float(mod (float(n), 2.0))));\n    xlat_mutableang2 = (((\n      ((6.28 * float(n)) / float(anz))\n     * q14) + (\n      (q9 * q28)\n     / 8.0)) + ((q28 * 3.1416) / 4.0));\n    float tmpvar_5;\n    tmpvar_5 = cos(xlat_mutableang2);\n    float tmpvar_6;\n    tmpvar_6 = sin(xlat_mutableang2);\n    xlat_mutableuv2.x = ((uv_1.x * tmpvar_5) - (uv_1.y * tmpvar_6));\n    xlat_mutableuv2.y = ((uv_1.x * tmpvar_6) + (uv_1.y * tmpvar_5));\n    xlat_mutableuv2 = (xlat_mutableuv2 / (1.0 + (\n      (q26 * sqrt(dot (uv_1, uv_1)))\n     * \n      float(xlat_mutablem)\n    )));\n    xlat_mutableuv2 = (xlat_mutableuv2 * (1.0 + (\n      (float(xlat_mutablem) - 0.5)\n     * q18)));\n    if (((q3 * float(xlat_mutablem)) == 1.0)) {\n      xlat_mutableuv2 = xlat_mutableuv2.yx;\n    };\n    xlat_mutableret1 = max (xlat_mutableret1, texture (sampler_main, (xlat_mutableuv2 + 0.5)).xyz);\n    n++;\n  };\n  xlat_mutablestars = 0.0;\n  anz = 2;\n  for (int n_1_2 = 0; n_1_2 <= anz; n_1_2++) {\n    xlat_mutabledist = (1.0 - fract((\n      (float(n_1_2) / float(anz))\n     + \n      (time / 8.0)\n    )));\n    xlat_mutableinten = (1.0 - pow (xlat_mutabledist, 4.0));\n    xlat_mutableuv4 = (((64.0 * xlat_mutabledist) * (xlat_mutableuv0 - 0.5)) * aspect.xy);\n    xlat_mutablesmask = (texture (sampler_pw_noise_lq, (xlat_mutableuv4 / 256.0)).y - 0.9);\n    vec2 tmpvar_7;\n    tmpvar_7 = abs((fract(xlat_mutableuv4) - 0.5));\n    float tmpvar_8;\n    tmpvar_8 = max (xlat_mutablestars, clamp ((xlat_mutableinten * \n      ((0.4 / sqrt(dot (tmpvar_7, tmpvar_7))) * xlat_mutablesmask)\n    ), 0.0, 1.0));\n    xlat_mutablestars = (tmpvar_8 * tmpvar_8);\n  };\n  vec3 tmpvar_9;\n  tmpvar_9 = (((texture (sampler_blur2, \n    (((uv - 0.5) / 2.0) + 0.5)\n  ).xyz * scale2) + bias2) * clamp ((1.0 - \n    dot ((xlat_mutableret1 * 16.0), vec3(0.32, 0.49, 0.29))\n  ), 0.0, 1.0));\n  xlat_mutableret1 = (xlat_mutableret1 * ((1.0 - q7) + (\n    (q7 * q25)\n   / 2.0)));\n  ret_3 = (1.0 - exp((\n    -(xlat_mutableret1)\n   * 4.0)));\n  ret_3 = (pow (ret_3, vec3(1.8, 1.8, 1.8)) + tmpvar_9);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = ret_3;\n  ret = tmpvar_10.xyz;\n }"}