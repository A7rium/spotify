{"baseVals":{"rating":5,"gammaadj":1,"decay":0.955,"echo_zoom":0.997,"echo_alpha":0.5,"echo_orient":1,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"wave_a":0.619,"wave_scale":0.628,"wave_smoothing":0.9,"wave_mystery":1,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"fshader":1,"zoom":1.00796,"rot":0.02,"warp":0.00016,"sx":0.99967,"sy":0.9999,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"wave_y":1,"mv_x":64,"mv_y":48,"mv_l":5,"mv_a":0.05},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":1,"thick":1,"additive":1,"scaling":2.0231,"smoothing":0,"r":0,"b":0},"init_eqs_str":"a.t3=0;a.t2=0;a.t1=0;a.d=0;a.t8=0;a.t2=0;a.t3=0;a.t4=0;a.cl=0;","frame_eqs_str":"a.t8=1;a.r+=.62*Math.sin(.777*a.time);a.b+=.225*Math.sin(.443*a.time);a.g+=.111*Math.sin(.883*a.time);","point_eqs_str":"a.t3=.6*a.t3+1*a.value1;a.t2=.7*a.t2+.2*a.t3;a.t1=.8*a.t1+.1*a.t2;a.d=.9*a.d+.2*a.t1;a.y=.5+a.d*a.sample*(1-a.sample);a.x=-.05+1.1*a.sample;a.t8=0;"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.du=0;a.q1=0;a.mult=0;a.ang2=0;a.dv=0;a.q4=0;a.q2=0;a.dist=0;a.q3=0;","frame_eqs_str":"a.wave_r+=.35*(.6*Math.sin(.98*a.time)+.4*Math.sin(1.047*a.time));a.wave_g+=.35*(.6*Math.sin(.835*a.time)+.4*Math.sin(1.081*a.time));a.wave_b+=.35*(.6*Math.sin(.814*a.time)+.4*Math.sin(1.011*a.time));a.q1=2*a.cx-1+.32*(.6*Math.sin(.374*a.time)+.4*Math.sin(.294*a.time));a.q2=2*a.cy-1+.52*(.6*Math.sin(.393*a.time)+.4*Math.sin(.223*a.time));a.q3=2*a.cx-1+.32*(.6*Math.sin(.174*-a.time)+.4*Math.sin(.364*a.time));a.q4=2*a.cy-1+.52*(.6*Math.sin(.234*a.time)+.4*Math.sin(.271*-a.time));\na.decay-=.01*equal(mod(a.frame,5),0);","pixel_eqs_str":"a.du=2*a.x-1-a.q1;a.dv=2*a.y-1-a.q2;a.dist=sqrt(a.du*a.du+a.dv*a.dv);a.ang2=Math.atan2(a.du,a.dv);a.mult=div(.012,a.dist+.4);a.dx=a.mult*Math.sin(a.ang2-1.5);a.dy=a.mult*Math.cos(a.ang2-1.5);a.du=2*a.x-1-a.q3;a.dv=2*a.y-1-a.q4;a.dist=sqrt(a.du*a.du+a.dv*a.dv);a.ang2=Math.atan2(a.du,a.dv);a.mult=div(.012,a.dist+.4);a.dx+=a.mult*Math.sin(a.ang2+1.5);a.dy+=a.mult*Math.cos(a.ang2+1.5);","warp":" shader_body { \n  vec3 ret_1;\n  ret_1 = texture (sampler_main, uv).xyz;\n  vec2 tmpvar_2;\n  tmpvar_2 = (normalize((uv - uv_orig)) * texsize.zw);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 0.0;\n  tmpvar_3.xyz = ret_1;\n  vec4 tmpvar_4;\n  tmpvar_4.w = 0.0;\n  tmpvar_4.xyz = max (tmpvar_3, texture (sampler_main, (uv + (tmpvar_2 * 2.3)))).xyz;\n  ret_1 = (max (tmpvar_4, texture (sampler_main, (uv - \n    (tmpvar_2 * 2.3)\n  ))).xyz * 0.97);\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = ret_1;\n  ret = tmpvar_5.xyz;\n }","comp":"vec2 xlat_mutabled;\nvec3 xlat_mutabledx;\nvec3 xlat_mutabledy;\nvec2 xlat_mutableuv_y;\n shader_body { \n  vec3 ret_1;\n  xlat_mutabled = (texsize.zw * 4.0);\n  xlat_mutabledx = (((texture (sampler_blur1, \n    (uv + (vec2(1.0, 0.0) * xlat_mutabled))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv - (vec2(1.0, 0.0) * xlat_mutabled))\n  ).xyz * scale1) + bias1));\n  xlat_mutabledy = (((texture (sampler_blur1, \n    (uv + (vec2(0.0, 1.0) * xlat_mutabled))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv - (vec2(0.0, 1.0) * xlat_mutabled))\n  ).xyz * scale1) + bias1));\n  vec2 tmpvar_2;\n  tmpvar_2.x = xlat_mutabledx.y;\n  tmpvar_2.y = xlat_mutabledy.y;\n  xlat_mutableuv_y = (uv + (tmpvar_2 * 0.4));\n  xlat_mutabled = (texsize.zw * 18.0);\n  xlat_mutabledx = (((texture (sampler_blur1, \n    (xlat_mutableuv_y + (vec2(1.0, 0.0) * xlat_mutabled))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (xlat_mutableuv_y - (vec2(1.0, 0.0) * xlat_mutabled))\n  ).xyz * scale1) + bias1));\n  xlat_mutabledy = (((texture (sampler_blur1, \n    (xlat_mutableuv_y + (vec2(0.0, 1.0) * xlat_mutabled))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (xlat_mutableuv_y - (vec2(0.0, 1.0) * xlat_mutabled))\n  ).xyz * scale1) + bias1));\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_main, uv);\n  ret_1 = ((tmpvar_3.x * (\n    (-(xlat_mutabledx) + xlat_mutabledy)\n   + 1.0).x) * pow (hue_shader, vec3(4.0, 4.0, 4.0)));\n  vec3 tmpvar_4;\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_blur1, uv);\n  tmpvar_4 = mix (mix (ret_1, pow (hue_shader.yzx, vec3(4.0, 4.0, 4.0)), vec3((\n    ((tmpvar_5.xyz * scale1) + bias1)\n  .y * 0.5))), (hue_shader.zxy * 1.2), vec3((tmpvar_3.z * (1.0 - \n    (((tmpvar_5.xyz * scale1) + bias1).y * 2.0)\n  ))));\n  ret_1 = tmpvar_4;\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = tmpvar_4;\n  ret = tmpvar_6.xyz;\n }"}