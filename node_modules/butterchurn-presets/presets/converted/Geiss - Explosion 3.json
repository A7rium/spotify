{"baseVals":{"rating":0,"gammaadj":1.9,"echo_zoom":1.169,"wave_mode":7,"modwavealphabyvolume":1,"wave_brighten":0,"wave_a":0.3,"wave_scale":2.122,"wave_smoothing":0.333,"modwavealphastart":0.99,"modwavealphaend":1.47,"warpscale":1.503,"zoomexp":0.13267,"zoom":1.01489,"warp":0.0475,"wave_r":0.71,"wave_g":0.69,"wave_b":0.68,"mv_a":0},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.dx_residual=0;a.dy_residual=0;a.bass_thresh=0;a.q1=0;a.q6=0;a.q7=0;","frame_eqs_str":"a.wave_r=.75+.25*Math.sin(.437*a.time+1)+.15*Math.sin(.197*a.time+4);a.wave_g=.75+.25*Math.sin(.544*a.time+2)+.15*Math.sin(.143*a.time+5);a.wave_b=.95+.25*Math.sin(.751*a.time+3)+.15*Math.sin(.117*a.time+6);a.rot+=.01*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*a.time));a.cx+=.21*(.6*Math.sin(.374*a.time)+.4*Math.sin(.294*a.time));a.cy+=.21*(.6*Math.sin(.393*a.time)+.4*Math.sin(.223*a.time));a.dx+=.003*(.6*Math.sin(.234*a.time)+.4*Math.sin(.277*a.time));a.dy+=.003*(.6*Math.sin(.284*\na.time)+.4*Math.sin(.247*a.time));a.decay-=.01*equal(mod(a.frame,6),0);a.dx+=a.dx_residual;a.dy+=a.dy_residual;a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*(.96*(a.bass_thresh-1.3)+1.3);a.dx_residual=.016*equal(a.bass_thresh,2.13)*Math.sin(7*a.time)+(1-equal(a.bass_thresh,2.13))*a.dx_residual;a.dy_residual=.012*equal(a.bass_thresh,2.13)*Math.sin(9*a.time)+(1-equal(a.bass_thresh,2.13))*a.dy_residual;a.wave_x-=7*a.dx_residual;a.wave_y-=7*a.dy_residual;a.wave_mystery=\n.03*a.time;a.zoom+=.008*(.35*Math.sin(.844*a.time+2)+.55*Math.sin(1.743*a.time+5));a.q1=.03;a.q6=50*a.dx;a.q7=50*a.dy;","pixel_eqs_str":"","pixel_eqs":"","warp":"uniform sampler2D sampler_lichen;\n shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, (uv + ((texture (sampler_main, \n    (mix (uv, uv_orig, vec2(-1.0, -1.0)) + texsize.zw)\n  ).xy - 0.5) * q1)));\n  ret_1 = (tmpvar_2.xyz - (vec3(0.001, 0.001, 0.0) * (\n    (clamp (((tmpvar_2.xyz - 0.5) * 99.0), 0.0, 1.0) * 2.0)\n   - 1.0)));\n  vec2 tmpvar_3;\n  tmpvar_3.x = slow_roam_cos.w;\n  tmpvar_3.y = slow_roam_sin.z;\n  ret_1 = (ret_1 * (0.998 - (0.1 * \n    clamp (((texture (sampler_lichen, (\n      (tmpvar_3 * 0.7)\n     + \n      (uv_orig * 0.2)\n    )).y * 5.0) - 3.7), 0.0, 1.0)\n  )));\n  ret_1 = (ret_1 + ((\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)).xyz - 0.5)\n   / 256.0) * 15.0));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_1;\n  ret = tmpvar_4.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (((texture (sampler_main, uv).xyz - 0.5) * 3.0) + 0.5);\n  ret = tmpvar_1.xyz;\n }"}