{"baseVals":{"rating":0,"gammaadj":1.980001,"decay":0.5,"echo_zoom":0.999998,"echo_alpha":0.5,"echo_orient":3,"wave_mode":1,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.167975,"wave_smoothing":0,"wave_mystery":-0.2,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":1.4595,"warpscale":2.0067,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0,"ob_a":1,"ib_size":0.26,"mv_x":31.999998,"mv_y":24.000004,"mv_l":0.5,"mv_r":0.2999,"mv_g":0.4999,"mv_b":0.3999,"mv_a":0,"b1ed":0.7},"shapes":[{"baseVals":{"enabled":1,"sides":3,"textured":1,"y":0.13,"rad":1.504994,"tex_zoom":0.459514,"r2":1,"g2":0,"border_r":0.7,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"","frame_eqs_str":""},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":1,"samples":247,"sep":9,"usedots":1,"additive":1,"scaling":0.067077,"smoothing":0.82,"r":0,"b":0.5},"init_eqs_str":"a.t1=0;a.t2=0;a.k1=0;a.k2=0;a.mod=0;a.t3=0;a.t1=1+.3*(.01*randint(101)-.01*randint(101));a.t2=1+.3*(.01*randint(101)-.01*randint(101));a.t3=1+.3*(.01*randint(101)-.01*randint(101));a.t4=1+.3*(.01*randint(101)-.01*randint(101));a.t5=1+.3*(.01*randint(101)-.01*randint(101));a.t6=1+.3*(.01*randint(101)-.01*randint(101));a.t7=1+.3*(.01*randint(101)-.01*randint(101));a.t8=1+.3*(.01*randint(101)-.01*randint(101));","frame_eqs_str":"a.t1=1;a.t3=Math.sin(div(a.time,2));a.t3=Math.max(a.t3,0);a.t3=4.9*Math.min(a.t3,.2);","point_eqs_str":"a.t1=mod(67*a.t1+37,4096);a.t2=div(a.t1,4096);a.k1=mod(100*a.sample+2*a.time,2);a.k2=mod(100*a.sample+5*a.time,2);a.x=.49+.48*Math.sin(31*a.sample+div(a.t2*a.time,27));a.y=.2*a.t2+.2*Math.sin(131*a.sample+div(a.t2*a.time,37));a.mod=Math.sin(600*a.sample+.4*a.time);a.mod=Math.max(a.mod,0);a.mod=3*Math.min(a.mod,.33);a.a=1;a.r=.02;a.b=.6*a.mod;a.g=a.mod*(.7+div(a.t2,4));"},{"baseVals":{"enabled":1,"scaling":0.891519,"smoothing":0.82,"a":0.1},"init_eqs_str":"a.t1=0;a.px=0;a.t2=0;a.py=0;a.k1=0;","frame_eqs_str":"a.t1=1;a.t2=7;","point_eqs_str":"a.r=.31;a.b=0;a.g=0;a.a=1;a.t1=mod(67*a.t1+37,4096);a.px=div(a.t1-2047,4096);a.t2=mod(67*a.t2+37,4096);a.py=div(a.t2-0,4096);a.k1=mod(100*a.sample,8);a.y=div(a.py,3.5)+0;a.a=below(a.y,.2);a.x=.5+.4*Math.sin(26*a.sample);"},{"baseVals":{"enabled":1,"samples":100,"scaling":0.01,"smoothing":0.82,"a":0.1},"init_eqs_str":"a.t5=0;a.t1=0;a.bird=0;a.y0=0;a.dx=0;a.t3=0;a.ground=0;a.k1=0;a.t6=0;a.f1=0;a.trig=0;a.dy=0;a.t2=0;a.t4=0;","frame_eqs_str":"a.t1=Math.sin(3*a.time);a.t2=Math.cos(3*a.time);a.t3=Math.sin(div(a.time,3));a.t4=Math.cos(div(a.time,3));a.t5=Math.cos(div(a.time,4));a.ground=below(a.t5,-.9);a.trig=below(randint(100),1);a.trig=a.trig*bnot(a.ground)*bnot(a.bird);a.bird*=bnot(a.ground);a.bird=bnot(a.bird)*a.trig;a.t6=a.bird;","point_eqs_str":"a.r=1;a.g=0;a.b=0;a.k1=below(a.sample,.5);a.dx=.02*a.k1*Math.sin(50*a.sample);a.f1=sqr(a.dx);a.dy=20*a.f1*a.t1+div(a.t2,150);a.dy+=.004*(1-a.k1)*Math.sin(50*a.sample);a.x=a.dx+.5+.1*a.t3;a.dy+=.2*a.dx*a.t4;a.y0+=div(a.time,7);a.y0-=Math.floor(a.y0);a.y0=a.t5;a.y=a.dy+.7+div(a.y0,8);a.a=.04;"},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.index=0;a.q22=0;a.q21=0;a.q29=0;a.dec_med=0;a.movz=0;a.movx=0;a.rott=0;a.is_beat=0;a.q23=0;a.k1=0;a.q24=0;a.dec_slow=0;a.q26=0;a.p2=0;a.avg=0;a.beat=0;a.p1=0;a.peak=0;a.q27=0;a.p3=0;a.t0=0;a.q28=0;a.q30=0;a.q20=0;a.q28=0;a.q29=0;a.p1=0;","frame_eqs_str":"a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.99,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.5+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,8);a.q20=a.avg;a.q21=a.beat;a.q22=a.peak;a.q23=a.index;a.q24=a.is_beat;a.q26=a.bass+a.mid+a.treb;a.k1=a.is_beat*equal(a.index,0);a.p1=\na.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_med*a.p2+(1-a.dec_med)*a.p1;a.p3=a.dec_med*a.p3+(1-a.dec_med)*a.p2;a.rott=div(3.1416*a.p3,2);a.q27=a.index+1;a.movz+=div(.18,a.fps)*(1.5+Math.sin(a.rott));a.q29=a.movz;a.movx+=div(.3,a.fps)*Math.sin(div(a.time,5));a.q28=a.movx;a.q30=Math.sin(div(a.time,9))+2;","pixel_eqs_str":"a.warp=.02;","warp":" shader_body { \n  float k1_1;\n  float ky_2;\n  vec2 uv3_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = ((uv - vec2(0.5, 0.5)) * aspect.xy);\n  uv3_3 = (60.0 * tmpvar_4);\n  float tmpvar_5;\n  tmpvar_5 = dot (texture (sampler_noise_lq, uv), vec4(0.32, 0.49, 0.29, 0.0));\n  ky_2 = clamp (((\n    (-(uv3_3.y) / 50.0)\n   + \n    ((tmpvar_5 / 8.0) * cos((16.0 * tmpvar_5)))\n  ) + 0.2), 0.0, 1.0);\n  float tmpvar_6;\n  tmpvar_6 = (uv3_3.x * (2.0 - (0.3 * uv.y)));\n  k1_1 = (tmpvar_6 - (sign(tmpvar_6) * 24.0));\n  k1_1 = (k1_1 - (sign(k1_1) * 9.0));\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (6.0 * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (12.0 * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (18.0 * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (24.0 * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (30.0 * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  float tmpvar_7;\n  tmpvar_7 = clamp (k1_1, -1.6, 1.6);\n  k1_1 = tmpvar_7;\n  vec2 tmpvar_8;\n  tmpvar_8.x = (sin(tmpvar_7) / cos(tmpvar_7));\n  tmpvar_8.y = uv3_3.y;\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ((texture (sampler_main, fract(uv)).xyz * 0.5) + ((\n    cos(tmpvar_7)\n   * \n    (vec3((dot (texture (sampler_noise_hq, (tmpvar_8 * \n      ((texsize.xy * texsize_noise_hq.zw) * 0.05)\n    .x)), vec4(0.32, 0.49, 0.29, 0.0)) + 0.2)) * vec3(0.125, 0.02, 0.01))\n  ) * clamp (\n    (1.0 - pow ((2.4 * tmpvar_4.y), 6.0))\n  , 0.0, 1.0)));\n  ret = tmpvar_9.xyz;\n }","comp":"float xlat_mutabledist;\nfloat xlat_mutabledist2;\nvec3 xlat_mutableglow;\nfloat xlat_mutableinten;\nfloat xlat_mutablem;\nfloat xlat_mutablemask;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv2;\nvec2 xlat_mutableuv3;\nvec2 xlat_mutableuv4;\n shader_body { \n  vec2 uv_1;\n  vec3 ret_2;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  int tmpvar_3;\n  tmpvar_3 = int(q29);\n  xlat_mutablem = (1.0 - float(tmpvar_3));\n  float tmpvar_4;\n  tmpvar_4 = -(q29);\n  xlat_mutabledist = (1.0 - fract((0.3333333 - \n    (fract(tmpvar_4) / 3.0)\n  )));\n  xlat_mutabledist2 = (xlat_mutabledist * xlat_mutabledist);\n  xlat_mutableinten = (1.0 - xlat_mutabledist2);\n  xlat_mutableuv2 = (((q30 * xlat_mutabledist) * (uv_1 - 0.2)) - 0.2);\n  xlat_mutablemask = (float((xlat_mutableuv2.y <= 0.0)) * float((xlat_mutableuv2.y >= -1.0)));\n  xlat_mutableuv3 = (fract((xlat_mutableuv2 + \n    ((xlat_mutablem + q28) * vec2(0.3, 0.0))\n  )) * xlat_mutablemask);\n  xlat_mutableglow = (((texture (sampler_blur1, xlat_mutableuv3).xyz * scale1) + bias1) * vec3(0.6, 1.0, 1.0));\n  xlat_mutableret1 = ((texture (sampler_main, xlat_mutableuv3).xyz + (2.0 * xlat_mutableglow)) * xlat_mutableinten);\n  xlat_mutablem = (2.0 - float(tmpvar_3));\n  xlat_mutabledist = (1.0 - fract((0.6666667 - \n    (fract(tmpvar_4) / 3.0)\n  )));\n  xlat_mutabledist2 = (xlat_mutabledist * xlat_mutabledist);\n  xlat_mutableinten = (1.0 - xlat_mutabledist2);\n  xlat_mutableuv2 = (((q30 * xlat_mutabledist) * (uv_1 - 0.2)) - 0.2);\n  xlat_mutablemask = (float((xlat_mutableuv2.y <= 0.0)) * float((xlat_mutableuv2.y >= -1.0)));\n  xlat_mutableuv3 = (fract((xlat_mutableuv2 + \n    ((xlat_mutablem + q28) * vec2(0.3, 0.0))\n  )) * xlat_mutablemask);\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_main, xlat_mutableuv3);\n  xlat_mutableglow = (((texture (sampler_blur1, xlat_mutableuv3).xyz * scale1) + bias1) * vec3(0.6, 1.0, 1.0));\n  xlat_mutablemask = (1.0 - clamp ((12.0 * tmpvar_5.xyz), 0.0, 1.0)).x;\n  xlat_mutableret1 = ((xlat_mutableret1 * xlat_mutablemask) + ((tmpvar_5.xyz + \n    (2.0 * xlat_mutableglow)\n  ) * xlat_mutableinten));\n  xlat_mutablem = (3.0 - float(tmpvar_3));\n  xlat_mutabledist = (1.0 - fract((1.0 - \n    (fract(tmpvar_4) / 3.0)\n  )));\n  xlat_mutabledist2 = (xlat_mutabledist * xlat_mutabledist);\n  xlat_mutableinten = (1.0 - xlat_mutabledist2);\n  xlat_mutableuv2 = (((q30 * xlat_mutabledist) * (uv_1 - 0.2)) - 0.2);\n  xlat_mutablemask = (float((xlat_mutableuv2.y <= 0.0)) * float((xlat_mutableuv2.y >= -1.0)));\n  xlat_mutableuv3 = (fract((xlat_mutableuv2 + \n    ((xlat_mutablem + q28) * vec2(0.3, 0.0))\n  )) * xlat_mutablemask);\n  vec4 tmpvar_6;\n  tmpvar_6 = texture (sampler_main, xlat_mutableuv3);\n  xlat_mutableglow = (((texture (sampler_blur1, xlat_mutableuv3).xyz * scale1) + bias1) * vec3(0.6, 1.0, 1.0));\n  xlat_mutablemask = (1.0 - clamp ((12.0 * tmpvar_6.xyz), 0.0, 1.0)).x;\n  xlat_mutableret1 = ((xlat_mutableret1 * xlat_mutablemask) + ((tmpvar_6.xyz + \n    (2.0 * xlat_mutableglow)\n  ) * xlat_mutableinten));\n  xlat_mutableuv4 = (uv_1 + vec2(-0.3, 0.1));\n  float tmpvar_7;\n  tmpvar_7 = (0.5 * clamp ((1.0/(\n    (abs(uv_1.y) + 0.1)\n  )), 0.0, 12.0));\n  vec2 tmpvar_8;\n  tmpvar_8.x = (uv_1.x * tmpvar_7);\n  tmpvar_8.y = tmpvar_7;\n  float tmpvar_9;\n  tmpvar_9 = clamp ((1.0 - (8.0 * xlat_mutableret1.x)), 0.0, 1.0);\n  vec3 tmpvar_10;\n  tmpvar_10.x = (0.4 * clamp ((1.0 - \n    (4.0 * uv_1.y)\n  ), 0.0, 1.0));\n  tmpvar_10.y = (0.4 * clamp ((1.0 - \n    (2.0 * uv_1.y)\n  ), 0.0, 1.0));\n  tmpvar_10.z = clamp ((1.0 - (3.0 * uv_1.y)), 0.0, 1.0);\n  ret_2 = ((xlat_mutableret1 * vec3(0.0, 1.0, 1.0)) + ((0.25 * tmpvar_10) * tmpvar_9));\n  ret_2 = (ret_2 + ((vec3(\n    dot (texture (sampler_noise_hq, (tmpvar_8 + (0.04 * time))), vec4(0.32, 0.49, 0.29, 0.0))\n  ) * \n    ((clamp ((1.0 - \n      (16.0 * uv_1.y)\n    ), 0.0, 1.0) * 0.02) / (0.01 + sqrt(dot (xlat_mutableuv4, xlat_mutableuv4))))\n  ) * tmpvar_9));\n  vec4 tmpvar_11;\n  tmpvar_11.w = 1.0;\n  tmpvar_11.xyz = ret_2;\n  ret = tmpvar_11.xyz;\n }"}