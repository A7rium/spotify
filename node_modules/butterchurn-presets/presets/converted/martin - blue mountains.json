{"baseVals":{"rating":2,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":6,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.312,"wave_scale":1.229,"wave_smoothing":0,"wave_mystery":0.2,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_r":1,"ob_g":1,"ob_b":1,"ib_size":0.26,"mv_x":12.8,"mv_y":9.6,"mv_l":0.05,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":16,"additive":1,"num_inst":69,"rad":0.01,"tex_zoom":4.57482,"r":0,"b":1,"g2":0,"border_r":0.8,"border_g":0,"border_a":0},"init_eqs_str":"a.k1=0;a.oz=0;a.k1=0;a.oz=0;a.oz=0;a.oz=0;a.ox=0;a.k1=0;a.oy=0;a.k1=0;a.fov=0;a.oz=0;a.oz=0;a.oz=0;a.k2=0;a.fov=0;a.ox=0;a.oz=0;a.k2=0;a.fov=0;a.oy=0;a.oz=0;a.k2=0;a.oz=0;a.oz=0;a.oz=0;a.oz=0;","frame_eqs_str":"a.k1=6.28*div(a.instance,a.num_inst);a.oz=a.k1+.04*a.time;a.oz=1+Math.floor(a.oz)-a.oz;a.ox=Math.sin(72*a.k1);a.oy=Math.cos(31*a.k1);a.fov=.02;a.oz*=a.oz;a.k2=0;a.x=div(a.fov*a.ox,a.oz+a.k2)+.5;a.y=div(2*a.fov*a.oy,a.oz+a.k2)+.5;a.rad=div(.04,a.oz);a.a=.5*above(a.oz,0)*Math.max(0,(1-pow(a.oz,2))*sqrt(a.oz));"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":1,"samples":193,"usedots":1,"additive":1,"scaling":0.89152,"smoothing":0.82,"a":0.6},"init_eqs_str":"a.instance=0;a.t2=0;a.ang1=0;a.rad1=0;a.t1=0;a.t1=div(randint(100),300)+.5;a.t2=div(randint(100),100)+1;","frame_eqs_str":"","point_eqs_str":"a.r=1;a.b=10;a.g=0;a.instance=a.sample*a.t2*21;a.ang1=16*Math.sin(26*a.t2*a.instance);a.rad1=a.sample;a.x=a.t1+.15*a.rad1*Math.cos(a.ang1);a.y=.5+.03*a.rad1*Math.sin(a.ang1);a.a=div(.3,a.rad1);"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.index2=0;a.index=0;a.dir2=0;a.q1=0;a.dec_med=0;a.dec_f=0;a.rott=0;a.is_beat=0;a.dec_slow=0;a.dir__=0;a.dir=0;a.dir_=0;a.p2=0;a.avg=0;a.trig=0;a.beat=0;a.p1=0;a.peak=0;a.q2=0;a.q3=0;a.t0=0;a.q30=0;a.q10=randint(1E3)+100;a.q11=.2+div(.5*randint(100),100);a.q12=12+randint(20);a.q13=div(4*randint(100),100);a.q14=div(randint(100),400)*a.q10;a.q15=div(randint(70),100)+.3;a.monitor=a.q15;a.q17=div(randint(100),200)+.5;a.q18=div(randint(100),200)+.5;a.q19=div(randint(100),200)+.5;\na.q20=above(a.q19+a.q18,2*a.q17);a.q21=div(randint(100),100)-.5;a.q22=div(randint(100),300);a.q23=div(randint(100),100)-.5;a.q24=div(randint(100),300);a.q25=div(randint(10),30);a.q26=div(randint(200),100)+1;a.q31=above(randint(100),30);","frame_eqs_str":"a.dec_f=pow(.9,div(30,a.fps));a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.97,div(30,a.fps));a.beat=a.bass+a.mid+a.treb;a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,1*a.avg+a.peak)*above(a.time,a.t0+1);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,16);a.index2=mod(a.index2+a.is_beat*bnot(a.index),4);a.trig=a.is_beat*equal(mod(a.index,2),0);a.p1=a.trig*(a.p1+1)+(1-a.trig)*\na.p1;a.p2=a.dec_slow*a.p2+(1-a.dec_slow)*a.p1;a.rott=div(3.1416*a.p2,4);a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.dec_slow=0;a.dir2=2*(div(randint(100),100)-.5);a.dir=.00001<Math.abs(a.trig*above(Math.abs(a.dir-a.dir2),.5))?a.dir2:a.dir;a.dir_=a.dir_*a.dec_slow+(1-a.dec_slow)*a.dir;a.dir__=a.dir__*a.dec_slow+(1-a.dec_slow)*a.dir_;a.q3=a.dir__;a.q30=.2*Math.sin(div(a.time,3));","pixel_eqs_str":"a.warp=0;a.rot=0;a.zoom=1;a.dy=0;","warp":"vec2 xlat_mutableuv1;\nvec2 xlat_mutableuv5;\n shader_body { \n  vec3 ret_1;\n  xlat_mutableuv1 = (uv - 0.5);\n  xlat_mutableuv5 = (xlat_mutableuv1 / 8.0);\n  xlat_mutableuv5.x = (xlat_mutableuv5.x + ((0.003 * \n    sin((time + (xlat_mutableuv1.x * 6.28)))\n  ) * abs(xlat_mutableuv1.y)));\n  vec2 tmpvar_2;\n  tmpvar_2.x = (xlat_mutableuv5.x / 4.0);\n  tmpvar_2.y = 0.0;\n  float tmpvar_3;\n  tmpvar_3 = (texture (sampler_noise_lq, (tmpvar_2 * 8.0)).x - 0.5);\n  vec2 tmpvar_4;\n  tmpvar_4.x = (xlat_mutableuv5.x * 8.0);\n  tmpvar_4.y = ((xlat_mutableuv5.y * 128.0) + (tmpvar_3 / 2.0));\n  float tmpvar_5;\n  tmpvar_5 = (texture (sampler_noise_lq, tmpvar_4).x - 0.5);\n  vec2 tmpvar_6;\n  tmpvar_6.x = (xlat_mutableuv5.x * 8.0);\n  tmpvar_6.y = ((xlat_mutableuv5.y * 8.0) + (tmpvar_5 * 0.01));\n  ret_1.y = clamp ((1.0 - (\n    (((abs(\n      (xlat_mutableuv5.y * 32.0)\n    ) / 0.61) * (1.0 + tmpvar_3)) * (1.0 + tmpvar_5))\n   * \n    (1.0 - (texture (sampler_noise_lq, (tmpvar_6 * 10.0)).x / 2.0))\n  )), 0.0, 1.0);\n  ret_1.x = (((\n    (texture (sampler_blur1, uv).xyz * scale1)\n   + bias1).x * 0.7) - 0.005);\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ret_1;\n  ret = tmpvar_7.xyz;\n }","comp":"float xlat_mutabledist;\nfloat xlat_mutablefmask;\nfloat xlat_mutablefog;\nfloat xlat_mutableforest;\nfloat xlat_mutablehill1;\nvec2 xlat_mutablers;\nvec2 xlat_mutablers0;\nfloat xlat_mutablesmask;\nfloat xlat_mutablesun;\nvec2 xlat_mutableuv1;\nvec2 xlat_mutableuv2;\nvec2 xlat_mutableuv_stars;\nvec2 xlat_mutableuv_wat;\nvec3 xlat_mutablewater;\nfloat xlat_mutablez;\n shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2.y = 0.5;\n  tmpvar_2.x = (0.5 + (0.5 * q3));\n  xlat_mutableuv1 = ((uv - tmpvar_2) * aspect.xy);\n  float tmpvar_3;\n  tmpvar_3 = clamp ((128.0 * xlat_mutableuv1.y), 0.0, 1.0);\n  xlat_mutabledist = (0.5 / xlat_mutableuv1.y);\n  xlat_mutablers0.x = (xlat_mutableuv1.x * xlat_mutabledist);\n  xlat_mutablers0.y = xlat_mutabledist;\n  vec2 tmpvar_4;\n  tmpvar_4.x = xlat_mutablers0.x;\n  float tmpvar_5;\n  tmpvar_5 = (time * 1.4);\n  tmpvar_4.y = (xlat_mutabledist + tmpvar_5);\n  xlat_mutablers = (tmpvar_4 * tmpvar_3);\n  xlat_mutablewater = ((texture (sampler_noise_hq, xlat_mutablers) + texture (sampler_noise_hq, (xlat_mutablers / 3.0))).xyz - 1.1);\n  vec2 tmpvar_6;\n  tmpvar_6.x = xlat_mutableuv1.x;\n  tmpvar_6.y = abs(xlat_mutableuv1.y);\n  xlat_mutableuv_wat = (tmpvar_6 - ((\n    (xlat_mutablewater * 0.1)\n   * tmpvar_3) / xlat_mutabledist).xy);\n  vec2 tmpvar_7;\n  tmpvar_7.x = xlat_mutableuv1.x;\n  tmpvar_7.y = abs(xlat_mutableuv1.y);\n  xlat_mutableuv_stars = (tmpvar_7 - ((xlat_mutablewater * 0.01) * tmpvar_3).xy);\n  vec2 x_8;\n  x_8 = (xlat_mutableuv_wat - _qf.zw);\n  xlat_mutablesun = (0.02 / sqrt(dot (x_8, x_8)));\n  xlat_mutablehill1 = (q31 * clamp ((\n    (16.0 + (16.0 * texture (sampler_noise_mq, vec2(((\n      (xlat_mutableuv_wat.x * q10)\n     / 2048.0) + rand_preset.x)))))\n   - \n    (q10 * abs(xlat_mutableuv_wat.y))\n  ), 0.0, 1.0)).x;\n  xlat_mutableuv2 = (64.0 * xlat_mutableuv_stars);\n  xlat_mutablesmask = (texture (sampler_pw_noise_lq, (xlat_mutableuv2 / 256.0)).z - 0.8);\n  vec2 tmpvar_9;\n  tmpvar_9 = abs((fract(xlat_mutableuv2) - 0.5));\n  float tmpvar_10;\n  tmpvar_10 = (clamp ((\n    (0.2 / sqrt(dot (tmpvar_9, tmpvar_9)))\n   * xlat_mutablesmask), 0.0, 1.0) * (1.0 - (xlat_mutablesmask * 8.0)));\n  vec2 tmpvar_11;\n  tmpvar_11 = (xlat_mutableuv_stars - _qf.xy);\n  float tmpvar_12;\n  tmpvar_12 = (q12 * sqrt(dot (tmpvar_11, tmpvar_11)));\n  vec2 tmpvar_13;\n  tmpvar_13 = ((sin(tmpvar_12) / cos(tmpvar_12)) * normalize(tmpvar_11));\n  float tmpvar_14;\n  tmpvar_14 = clamp ((100.0 - (71.0 * tmpvar_12)), 0.0, 1.0);\n  vec2 tmpvar_15;\n  tmpvar_15 = (_qf.zw - _qf.xy);\n  xlat_mutablez = (q11 / xlat_mutableuv_wat.x);\n  xlat_mutableuv2.x = (((\n    abs(xlat_mutablez)\n   / 2.0) + sign(xlat_mutablez)) + (0.056 * time));\n  float tmpvar_16;\n  tmpvar_16 = (texture (sampler_noise_hq, vec2((xlat_mutableuv2.x / 18.0))) + 0.1).x;\n  xlat_mutableuv2.y = (((xlat_mutableuv_wat.y * xlat_mutablez) / tmpvar_16) - 0.5);\n  xlat_mutablefmask = (float((xlat_mutableuv2.y <= 0.0)) * float((xlat_mutableuv2.y >= -1.0)));\n  xlat_mutableforest = (clamp ((\n    (texture (sampler_main, (xlat_mutableuv2 * xlat_mutablefmask)).xyz / abs(xlat_mutablez))\n   * 2.0), 0.0, 1.0).y * xlat_mutablefmask);\n  xlat_mutableuv2.x = (((\n    abs(xlat_mutablez)\n   / 2.0) + sign(xlat_mutablez)) + (0.049 * time));\n  xlat_mutableuv2.y = (((xlat_mutableuv_wat.y * xlat_mutablez) / tmpvar_16) - 0.5);\n  xlat_mutablefmask = (float((xlat_mutableuv2.y <= 0.0)) * float((xlat_mutableuv2.y >= -1.0)));\n  xlat_mutableforest = (xlat_mutableforest + ((\n    clamp (((texture (sampler_main, (xlat_mutableuv2 * xlat_mutablefmask)).xyz / abs(xlat_mutablez)) * 2.0), 0.0, 1.0)\n  .y * xlat_mutablefmask) * 0.7));\n  float tmpvar_17;\n  tmpvar_17 = clamp ((1.0 - (xlat_mutableforest * 1.5)), 0.0, 1.0);\n  xlat_mutablefmask = tmpvar_17;\n  ret_1 = (((tmpvar_10 * \n    (tmpvar_10 * q26)\n  ) * clamp (\n    (1.0 - (4.0 * xlat_mutablesun))\n  , 0.0, 1.0)) + (xlat_mutablesun * _qe.xyz));\n  ret_1 = (ret_1 * (1.0 - tmpvar_14));\n  ret_1 = (ret_1 + ((\n    ((clamp ((-0.2 + \n      dot (((tmpvar_13 * (1.0 + \n        abs((texture (sampler_noise_hq, (tmpvar_13 / 2.0)) - 0.5))\n      .x)) * tmpvar_14), tmpvar_15)\n    ), 0.0, 1.0) / sqrt(dot (tmpvar_15, tmpvar_15))) / 2.0)\n   * \n    (_qe.xyz + vec3(0.3, 0.4, 0.5))\n  ) / 2.0));\n  ret_1 = (ret_1 * (1.0 - xlat_mutablehill1));\n  vec2 tmpvar_18;\n  tmpvar_18.x = ((xlat_mutableuv_wat.x * 2.0) - 0.5);\n  tmpvar_18.y = ((xlat_mutableuv_wat.y * 4.0) - 0.5);\n  ret_1 = (ret_1 + ((texture (sampler_main, tmpvar_18).x * xlat_mutablehill1) * vec3(1.0, 0.8, 0.5)));\n  ret_1 = (ret_1 + (clamp (\n    (mix ((q13 * exp(\n      (-(q14) * abs(xlat_mutableuv1.y))\n    )), (0.5 - xlat_mutableuv1.y), q15) * vec3(0.3, 0.4, 0.5))\n  , 0.0, 1.0) * vec3(0.3, 0.4, 0.5)));\n  ret_1 = (ret_1 * tmpvar_17);\n  vec2 tmpvar_19;\n  tmpvar_19.x = (0.5 + (xlat_mutableuv1.x * 0.1));\n  tmpvar_19.y = ((xlat_mutableuv1.y * 0.75) + 0.5);\n  xlat_mutableuv2 = tmpvar_19;\n  xlat_mutablefog = (((texture (sampler_blur2, \n    fract(tmpvar_19)\n  ).xyz * scale2) + bias2).z * q25);\n  ret_1 = ((ret_1 * clamp (\n    (1.0 - xlat_mutablefog)\n  , 0.0, 1.0)) + (xlat_mutablefog * (1.0 + _qe.xyz)));\n  vec2 tmpvar_20;\n  tmpvar_20.x = xlat_mutablers0.x;\n  tmpvar_20.y = ((xlat_mutabledist + (tmpvar_5 * 0.8)) + (q30 * sin(\n    (xlat_mutablers0.x * 4.0)\n  )));\n  xlat_mutablers = (tmpvar_20 * tmpvar_3);\n  vec3 tmpvar_21;\n  tmpvar_21 = ((texture (sampler_noise_hq, xlat_mutablers) + texture (sampler_noise_hq, (xlat_mutablers / 4.0))) - 1.0).xyz;\n  xlat_mutablewater = tmpvar_21;\n  ret_1 = (ret_1 + ((\n    (((clamp (tmpvar_21.y, 0.0, 1.0) * tmpvar_3) * clamp ((xlat_mutablesun * 2.0), 0.0, 1.0)) * 4.0)\n   / xlat_mutabledist) * q20));\n  ret_1 = (1.0 - exp((\n    (-(ret_1) * 2.0)\n   + 0.1)));\n  vec4 tmpvar_22;\n  tmpvar_22.w = 1.0;\n  tmpvar_22.xyz = ret_1;\n  ret = tmpvar_22.xyz;\n }"}