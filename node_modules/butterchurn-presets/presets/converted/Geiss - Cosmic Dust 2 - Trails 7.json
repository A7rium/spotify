{"baseVals":{"rating":0,"gammaadj":1.9,"echo_zoom":1.16936,"wave_mode":7,"modwavealphabyvolume":1,"wave_brighten":0,"wave_a":1.0029,"wave_scale":2.911018,"wave_smoothing":0.9,"modwavealphastart":1.15,"modwavealphaend":1.469999,"warpscale":3.138,"zoom":1.063,"dy":-0.005,"warp":0.000536,"wave_r":0.83,"wave_g":0.8,"wave_b":0.8,"wave_y":0.35,"mv_a":0},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.dx_residual=0;a.dy_residual=0;a.bass_thresh=0;a.q1=0;a.q2=0;a.q3=0;a.q4=0;","frame_eqs_str":"a.wave_r+=.65*(.6*Math.sin(1.437*a.time)+.4*Math.sin(.97*a.time));a.wave_g+=.65*(.6*Math.sin(1.344*a.time)+.4*Math.sin(.841*a.time));a.wave_b+=.65*(.6*Math.sin(1.251*a.time)+.4*Math.sin(1.055*a.time));a.rot+=.01*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*a.time));a.cx+=.21*(.6*Math.sin(.374*a.time)+.4*Math.sin(.294*a.time));a.cy+=.21*(.6*Math.sin(.393*a.time)+.4*Math.sin(.223*a.time));a.dx+=.01*(.6*Math.sin(.234*a.time)+.4*Math.sin(.277*a.time));a.dy+=.01*(.6*Math.sin(.284*\na.time)+.4*Math.sin(.247*a.time));a.decay-=.01*equal(mod(a.frame,6),0);a.dx+=a.dx_residual;a.dy+=a.dy_residual;a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*(.96*(a.bass_thresh-1.3)+1.3);a.dx_residual=.9*(.016*equal(a.bass_thresh,2.13)*Math.sin(7*a.time)+(1-equal(a.bass_thresh,2.13))*a.dx_residual);a.dy_residual=.9*(.012*equal(a.bass_thresh,2.13)*Math.sin(9*a.time)+(1-equal(a.bass_thresh,2.13))*a.dy_residual);a.wave_x-=7*a.dx_residual;a.wave_y-=7*a.dy_residual;\na.zoom+=.04*Math.cos(.513*a.time+2);a.q1=.12*Math.cos(.479*a.time+1);a.q2=.52*Math.cos(.359*a.time+2);a.q3=.52*Math.cos(.27*a.time+6);a.q4=.12*Math.cos(.394*a.time+1);","pixel_eqs_str":"","pixel_eqs":"","warp":" shader_body { \n  vec2 uv_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = (uv - 0.5);\n  uv_1 = (tmpvar_2 * ((1.0 + \n    (q1 * tmpvar_2.y)\n  ) + (q2 * tmpvar_2.x)));\n  uv_1 = (uv_1 + 0.5);\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_main, uv_1);\n  uv_1 = (tmpvar_2 * ((1.0 + \n    (q3 * tmpvar_2.y)\n  ) + (q4 * tmpvar_2.x)));\n  uv_1 = (uv_1 + 0.5);\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ((max (tmpvar_3.xyz, texture (sampler_main, uv_1).xyz) - 0.004) * 0.97);\n  ret = tmpvar_4.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (pow (texture (sampler_main, uv).xyz, vec3(0.7, 1.1, 1.5)) * 1.333);\n  ret = tmpvar_1.xyz;\n }"}