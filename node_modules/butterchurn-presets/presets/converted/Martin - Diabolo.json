{"baseVals":{"rating":3,"gammaadj":1.78,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":3,"additivewave":1,"wave_dots":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.084,"wave_smoothing":0.36,"wave_mystery":0.2,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_a":1,"ib_size":0,"mv_x":12.8,"mv_y":9.6,"mv_l":0.05,"mv_b":0.5,"mv_a":0,"b1x":0.7,"b1ed":0},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":1,"samples":382,"thick":1,"additive":1,"scaling":0.89152,"smoothing":0.82,"a":0.05},"init_eqs_str":"a.xang=0;a.ampl=0;a.fov=0;a.q12=0;a.t1=0;a.yang=0;a.q13=0;a.q29=0;a.t3=0;a.my=0;a.oz=0;a.t_rel=0;a.mz=0;a.oy=0;a.mx=0;a.t2=0;a.zang=0;a.q14=0;a.q28=0;a.q30=0;a.t_abs=0;a.q20=0;a.ox=0;","frame_eqs_str":"a.t1=Math.cos(a.q30);a.t2=Math.sin(4*a.q30);a.t3=div(a.q29,3);","point_eqs_str":"a.t_abs=a.sample;a.t_rel=a.sample-div(a.time,6);a.ampl=Math.abs(Math.sin(3*a.t_abs)-mod(a.q28,2))+.5;a.ox=3*Math.sin(4*a.q30)+a.ampl*Math.sin(500*a.t_rel);a.oy=3*Math.cos(a.q30)+a.ampl*Math.cos(a.t_rel*(480+4*a.q28));a.oz=3*a.t_abs;a.r=a.q12;a.b=a.q13;a.g=a.q14;a.xang=a.t2+div(a.t3,3);a.yang=a.t1*a.t2-div(a.t3,4);a.zang=a.t3;a.fov=Math.min(Math.max(.2*a.q20,.1),.4);a.mx=a.ox*Math.cos(a.zang)-a.oy*Math.sin(a.zang);a.my=a.ox*Math.sin(a.zang)+a.oy*Math.cos(a.zang);a.ox=a.mx;a.oy=\na.my;a.mx=a.ox*Math.cos(a.yang)+a.oz*Math.sin(a.yang);a.mz=-a.ox*Math.sin(a.yang)+a.oz*Math.cos(a.yang);a.ox=a.mx;a.oz=a.mz;a.my=a.oy*Math.cos(a.xang)-a.oz*Math.sin(a.xang);a.mz=a.oy*Math.sin(a.xang)+a.oz*Math.cos(a.xang);a.oy=a.my;a.oz=a.mz;a.oz-=7;a.x=div(a.ox*a.fov,a.oz)+.5;a.y=div(a.oy*a.fov,a.oz)+.5;"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.winkel=0;a.index2=0;a.index=0;a.q12=0;a.q22=0;a.q21=0;a.q13=0;a.q15=0;a.q29=0;a.q1=0;a.dec_med=0;a.trel=0;a.rott=0;a.mid_=0;a.is_beat=0;a.q31=0;a.q23=0;a.k1=0;a.q24=0;a.trel_=0;a.pulse=0;a.dec_slow=0;a.treb_=0;a.p2=0;a.avg=0;a.rota=0;a.q19=0;a.beat=0;a.p1=0;a.peak=0;a.q2=0;a.q27=0;a.q14=0;a.t0=0;a.q28=0;a.q30=0;a.q20=0;a.bass_=0;a.trel=randint(10);a.index=randint(8);a.index2=randint(8);a.avg=0;","frame_eqs_str":"a.dec_med=pow(.8,div(30,a.fps));a.dec_slow=pow(.98,div(30,a.fps));a.beat=div(a.bass+a.mid+a.treb,3);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.2+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,8);a.index2=mod(a.index2+a.is_beat*bnot(a.index),8);a.q20=a.avg;a.q21=a.beat;a.q22=a.peak;a.q23=a.bass+a.mid+a.treb-(a.bass_att+a.mid_att+a.treb_att);\na.q23=a.beat-a.avg;a.q24=a.is_beat;a.q27=a.index;a.q28=a.index2;a.q19=a.index;a.k1=a.is_beat*equal(a.index,0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_med*a.p2+(1-a.dec_med)*a.p1;a.rott=div(3.14159265359*a.p2,2);a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.pulse=a.pulse*a.dec_slow+(1-a.dec_slow)*a.peak;a.winkel+=30*div(a.pulse,a.fps);a.q29=a.winkel;a.trel+=div(div(a.bass_+a.mid_+a.treb_,a.fps),3);a.trel_=a.trel_*a.dec_med+(1-a.dec_med)*a.trel;a.q30=a.trel_;a.q31=12*Math.sin(div(a.trel_,4));a.dec_slow=\npow(.94,div(30,a.fps));a.bass_=a.bass_*a.dec_slow+(1-a.dec_slow)*a.bass_att;a.mid_=a.mid_*a.dec_slow+(1-a.dec_slow)*a.mid_att;a.treb_=a.treb_*a.dec_slow+(1-a.dec_slow)*a.treb_att;a.q12=sigmoid(4*(a.bass_-a.treb_),1);a.q13=sigmoid(4*(a.mid_-a.bass_),1);a.q14=sigmoid(4*(a.treb_-a.mid_),1);a.q15=above(a.q20,1.3);a.rota=a.rota*a.dec_med+div((1-a.dec_med)*a.q22,2);a.zoom=1+div(2*a.q1,a.fps);a.cx=.5+.2*Math.sin(12*a.trel_)*bnot(mod(a.q28,3));a.cy=.5+.4*Math.cos(6*a.trel_)*bnot(mod(a.q28,3));a.rot=div(50*\n(.04*a.q1+div(a.rota,8)*a.q2),a.fps);a.dx=div(.6*a.q1,a.fps)*a.avg;a.dy=div(.6*a.q2,a.fps)*a.avg;","pixel_eqs_str":"","pixel_eqs":"","warp":"float xlat_mutableq25;\n shader_body { \n  vec2 uv_1;\n  vec3 crisp_2;\n  float tmpvar_3;\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_blur1, uv_orig);\n  tmpvar_3 = ((16.0 * dot (\n    ((tmpvar_4.xyz * scale1) + bias1)\n  , vec3(0.32, 0.49, 0.29))) * (0.5 + q22));\n  mat2 tmpvar_5;\n  tmpvar_5[uint(0)].x = cos(tmpvar_3);\n  tmpvar_5[uint(0)].y = -(sin(tmpvar_3));\n  tmpvar_5[1u].x = sin(tmpvar_3);\n  tmpvar_5[1u].y = cos(tmpvar_3);\n  uv_1 = (uv + ((0.25 * \n    dot (((tmpvar_4.xyz * scale1) + bias1), vec3(0.32, 0.49, 0.29))\n  ) * (\n    (uv - 0.5)\n   * tmpvar_5)));\n  vec2 tmpvar_6;\n  tmpvar_6 = (((uv_orig * texsize.xy) * 0.02) + time);\n  vec2 tmpvar_7;\n  tmpvar_7.x = (cos((tmpvar_6.y * q1)) * sin(-(tmpvar_6.y)));\n  tmpvar_7.y = (sin(tmpvar_6.x) * cos((tmpvar_6.y * q2)));\n  uv_1 = (uv_1 + ((tmpvar_7 * texsize.zw) * q31));\n  crisp_2 = (((\n    ((texture (sampler_fw_main, uv_1) * 2.0).xyz * 0.98)\n   / 2.0) - 0.005) - (8.0 * max (\n    pow ((uv_orig.x - 0.5), 6.0)\n  , \n    pow ((uv_orig.y - 0.5), 6.0)\n  )));\n  xlat_mutableq25 = (float((q22 >= 1.0)) * q15);\n  crisp_2 = ((crisp_2 * (1.0 - xlat_mutableq25)) + (xlat_mutableq25 * texture (sampler_main, uv_orig).xyz));\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = mix (crisp_2, vec3(dot (crisp_2, vec3(0.32, 0.49, 0.29))), vec3((0.2 * dot (\n    ((tmpvar_4.xyz * scale1) + bias1)\n  , vec3(0.32, 0.49, 0.29)))));\n  ret = tmpvar_8.xyz;\n }","comp":"vec3 xlat_mutableback;\n shader_body { \n  vec3 ret_1;\n  xlat_mutableback = ((texture (sampler_blur3, uv_orig).xyz * scale3) + bias3);\n  vec2 tmpvar_2;\n  tmpvar_2.x = uv.x;\n  tmpvar_2.y = ((-(uv.y) * 2.0) + 2.0);\n  ret_1 = (mix (texture (sampler_main, uv).xyz, (1.5 * \n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  ), vec3(clamp (\n    dot (xlat_mutableback, vec3(0.32, 0.49, 0.29))\n  , 0.0, 1.0))) + ((xlat_mutableback * q22) / 2.0));\n  ret_1 = (ret_1 + ((\n    (clamp ((0.5 - (4.0 * \n      dot (xlat_mutableback, vec3(0.32, 0.49, 0.29))\n    )), 0.0, 1.0) * (uv.y / 2.0))\n   * \n    (1.0 - (dot ((\n      (texture (sampler_blur2, fract(tmpvar_2)).xyz * scale2)\n     + bias2), vec3(0.32, 0.49, 0.29)) * clamp ((4.0 - \n      (4.0 * tmpvar_2.y)\n    ), 0.0, 1.0)))\n  ) * (0.5 + \n    (hue_shader / 2.0)\n  )));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }"}