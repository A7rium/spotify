{"baseVals":{"rating":5,"gammaadj":1.9,"echo_zoom":1.169,"wave_mode":2,"wave_dots":1,"wave_thick":1,"wave_a":1.347,"wave_scale":1.91,"wave_smoothing":0.9,"wave_mystery":-0.1,"warpscale":3.138,"zoom":1.02225,"warp":0.00054,"wave_r":0.5,"wave_g":0.5,"wave_b":0.3,"mv_a":0},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.lum=0;a.dx_residual=0;a.dy_residual=0;a.bass_thresh=0;","frame_eqs_str":"a.wave_r+=.65*(.6*Math.sin(31.437*a.time)+.4*Math.sin(20.97*a.time));a.wave_g+=.65*(.6*Math.sin(31.344*a.time)+.4*Math.sin(20.841*a.time));a.wave_b+=.65*(.6*Math.sin(31.251*a.time)+.4*Math.sin(21.055*a.time));a.lum=.3*a.wave_r+.5*a.wave_g+.2*a.wave_b;a.wave_r=.2*a.wave_r+.8*a.lum;a.wave_g=.2*a.wave_g+.8*a.lum;a.wave_b=.2*a.wave_b+.8*a.lum;a.rot+=.01*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*a.time));a.cx+=.21*(.6*Math.sin(.374*a.time)+.4*Math.sin(.294*a.time));a.cy+=.21*(.6*\nMath.sin(.393*a.time)+.4*Math.sin(.223*a.time));a.dx+=.001*(.6*Math.sin(.234*a.time)+.4*Math.sin(.277*a.time));a.dy+=.001*(.6*Math.sin(.284*a.time)+.4*Math.sin(.247*a.time));a.decay-=.01*equal(mod(a.frame,6),0);a.dx+=.01*a.dx_residual;a.dy+=.01*a.dy_residual;a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*(.96*(a.bass_thresh-1.3)+1.3);a.dx_residual=.9*(.016*equal(a.bass_thresh,2.13)*Math.sin(7*a.time)+(1-equal(a.bass_thresh,2.13))*a.dx_residual);a.dy_residual=.9*\n(.012*equal(a.bass_thresh,2.13)*Math.sin(9*a.time)+(1-equal(a.bass_thresh,2.13))*a.dy_residual);a.wave_x-=7*a.dx_residual;a.wave_y-=7*a.dy_residual;","pixel_eqs_str":"","pixel_eqs":"","warp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = ((texture (sampler_noise_lq, (rand_frame.xy + \n    ((uv * texsize_noise_lq.zw) * texsize.xy)\n  )) * 2.0) - 1.0);\n  ret_1 = (texture (sampler_pw_main, (uv + (\n    (tmpvar_2.zw * texsize.zw)\n   * 0.5))).xyz + ((0.59 - \n    (0.2 * rad)\n  ) * tmpvar_2.xyz));\n  vec3 tmpvar_3;\n  tmpvar_3 = clamp (((\n    (ret_1 - 0.5)\n   * 3.0) + 0.25), 0.0, 1.0);\n  ret_1.x = tmpvar_3.x;\n  ret_1.yz = tmpvar_3.xx;\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_1;\n  ret = tmpvar_4.xyz;\n }","comp":" shader_body { \n  float tmpvar_1;\n  tmpvar_1 = abs(((\n    fract((((ang / 6.28) * 7.0) + (time * 0.05)))\n   * 2.0) - 1.0));\n  vec2 tmpvar_2;\n  tmpvar_2.x = cos(tmpvar_1);\n  tmpvar_2.y = sin(tmpvar_1);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = (-0.3 + (1.7 * texture (sampler_main, (0.5 + \n    ((pow (rad, 0.5) * 0.5) * tmpvar_2)\n  )).xyz));\n  ret = tmpvar_3.xyz;\n }"}