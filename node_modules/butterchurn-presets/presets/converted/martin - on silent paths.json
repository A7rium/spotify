{"baseVals":{"rating":2,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":1,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.168,"wave_smoothing":0,"wave_mystery":-0.2,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0,"ob_a":1,"ib_size":0.26,"mv_x":32,"mv_y":24,"mv_l":0.5,"mv_r":0.3,"mv_g":0.5,"mv_b":0.4,"mv_a":0,"b1ed":0.7},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":1,"scaling":0.89152,"smoothing":0.82,"a":0.1},"init_eqs_str":"a.t1=0;a.px=0;a.t2=0;a.py=0;a.k1=0;","frame_eqs_str":"a.t1=1;a.t2=7;","point_eqs_str":"a.r=.31;a.b=0;a.g=0;a.a=1;a.t1=mod(67*a.t1+37,4096);a.px=div(a.t1-2047,4096);a.t2=mod(67*a.t2+37,4096);a.py=div(a.t2-0,4096);a.k1=mod(100*a.sample,8);a.y=div(a.py,5)+.1;a.a=below(a.py,.9);a.x=.5+.4*Math.sin(26*a.sample);"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.index=0;a.q22=0;a.q21=0;a.q29=0;a.dec_med=0;a.movz=0;a.movx=0;a.rott=0;a.is_beat=0;a.q23=0;a.k1=0;a.q24=0;a.dec_slow=0;a.q10=0;a.bass_2=0;a.q26=0;a.p2=0;a.avg=0;a.beat=0;a.p1=0;a.peak=0;a.q27=0;a.p3=0;a.t0=0;a.q28=0;a.q30=0;a.q20=0;a.bass_=0;a.q28=0;a.q29=0;a.p1=0;","frame_eqs_str":"a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.99,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.5+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,8);a.q20=a.avg;a.q21=a.beat;a.q22=a.peak;a.q23=a.index;a.q24=a.is_beat;a.q26=a.bass+a.mid+a.treb;a.k1=a.is_beat*equal(a.index,0);a.p1=\na.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_med*a.p2+(1-a.dec_med)*a.p1;a.p3=a.dec_med*a.p3+(1-a.dec_med)*a.p2;a.rott=div(3.1416*a.p3,2);a.q27=a.index+1;a.movz+=div(.18,a.fps)*(1.5+Math.sin(a.rott));a.q29=a.movz;a.movx+=div(.3,a.fps)*Math.sin(div(a.time,5));a.q28=a.movx;a.q30=Math.sin(div(a.time,9))+2;a.bass_=a.bass_*a.dec_slow+(1-a.dec_slow)*a.bass_att;a.bass_2=a.bass_2*a.dec_slow+(1-a.dec_slow)*a.bass_;a.q10=a.bass_2-a.bass_;a.q10=.005*-Math.sin(.5*a.time);","pixel_eqs_str":"a.warp=.02;","warp":" shader_body { \n  float k1_1;\n  float ky_2;\n  vec2 uv3_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = (uv - vec2(0.5, 0.5));\n  uv3_3 = ((40.0 + (30.0 * rand_preset)).x * tmpvar_4);\n  float tmpvar_5;\n  tmpvar_5 = dot (texture (sampler_noise_lq, uv), vec4(0.32, 0.49, 0.29, 0.0));\n  ky_2 = clamp (((\n    (-(uv3_3.y) / 50.0)\n   + \n    ((tmpvar_5 / (4.0 + (16.0 * rand_preset)).x) * cos((16.0 * tmpvar_5)))\n  ) + 0.2), 0.0, 1.0);\n  float tmpvar_6;\n  tmpvar_6 = (uv3_3.x * 2.0);\n  k1_1 = (tmpvar_6 - (sign(tmpvar_6) * 24.0));\n  k1_1 = (k1_1 - (sign(k1_1) * 9.0));\n  k1_1 = (k1_1 - (sign(k1_1) * 5.0));\n  float tmpvar_7;\n  tmpvar_7 = (6.0 * rand_preset.x);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - ((3.0 + tmpvar_7) * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (((3.0 + tmpvar_7) * 2.0) * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (((3.0 + tmpvar_7) * 3.0) * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (((3.0 + tmpvar_7) * 4.0) * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (((3.0 + tmpvar_7) * 5.0) * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  float tmpvar_8;\n  tmpvar_8 = clamp (k1_1, -1.6, 1.6);\n  k1_1 = tmpvar_8;\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = clamp ((clamp (\n    ((vec3((abs(\n      cos(tmpvar_8)\n    ) / 2.0)) * vec3(1.0, 0.0, 0.0)) * (1.0 - pow ((\n      (3.0 * tmpvar_4.y)\n     - 0.1), 4.0)))\n  , 0.0, 1.0) + (vec3(0.5, 0.0, 0.0) * \n    pow ((2.0 * tmpvar_4.y), 6.0)\n  )), 0.0, 1.0);\n  ret = tmpvar_9.xyz;\n }","comp":"float xlat_mutablecover;\nfloat xlat_mutabledist;\nfloat xlat_mutabledist2;\nfloat xlat_mutableinten;\nfloat xlat_mutablen;\nvec3 xlat_mutableneu;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv2;\nvec2 xlat_mutableuv5;\n shader_body { \n  vec2 uv_1;\n  vec3 clouds_2;\n  vec2 sunpos_3;\n  vec3 ret_4;\n  vec2 tmpvar_5;\n  tmpvar_5.y = -0.6;\n  tmpvar_5.x = (rand_preset.x - 0.5);\n  sunpos_3 = tmpvar_5;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  uv_1.x = uv_1.x;\n  clouds_2 = ((clamp (\n    (uv.y * uv.y)\n  , 0.0, 1.0) * (1.0 + rand_preset)).xyz + ((\n    clamp ((1.0 - uv.y), 0.0, 1.0)\n   * \n    (1.0 + (rand_preset * slow_roam_cos))\n  ) / 2.0).xyz);\n  xlat_mutablecover = 0.0;\n  xlat_mutableret1 = vec3(0.0, 0.0, 0.0);\n  xlat_mutablen = 1.0;\n  while (true) {\n    if ((xlat_mutablen > 6.0)) {\n      break;\n    };\n    xlat_mutabledist = (1.0 - fract((\n      (xlat_mutablen / 6.0)\n     + \n      (0.02 * time)\n    )));\n    xlat_mutabledist2 = (1.0 - fract((\n      (xlat_mutablen / 6.0)\n     + \n      (0.01 * time)\n    )));\n    xlat_mutableinten = ((1.0 - xlat_mutabledist) * 2.0);\n    xlat_mutableuv2.y = (uv_1.y - (0.2 * rand_preset.y));\n    xlat_mutableuv2.x = (uv_1.x + ((rand_preset.z - 0.5) / 2.0));\n    vec2 tmpvar_6;\n    tmpvar_6.x = 0.5;\n    tmpvar_6.y = ((0.25 + q10) + (0.1 * rand_preset.x));\n    xlat_mutableuv2 = (((\n      (1.0 + (2.0 * rand_preset.x))\n     * xlat_mutabledist) * xlat_mutableuv2) - tmpvar_6);\n    vec2 tmpvar_7;\n    tmpvar_7 = fract(xlat_mutableuv2);\n    xlat_mutableuv5 = ((normalize(\n      (uv_1 - sunpos_3)\n    ) * 0.2) + sunpos_3);\n    xlat_mutablecover = (xlat_mutablecover + dot ((\n      (texture (sampler_blur1, fract(((2.0 * xlat_mutableuv5) * xlat_mutabledist2))).xyz * scale1)\n     + bias1), vec3(0.32, 0.49, 0.29)));\n    xlat_mutableneu = ((texture (sampler_main, tmpvar_7).xyz + (\n      (texture (sampler_blur1, tmpvar_7).xyz * scale1)\n     + bias1)) / 4.0);\n    xlat_mutableret1 = (xlat_mutableret1 + (xlat_mutableneu * xlat_mutableinten));\n    xlat_mutablen += 1.0;\n  };\n  float tmpvar_8;\n  tmpvar_8 = clamp ((xlat_mutablecover * 2.0), 0.0, 1.0);\n  ret_4 = (clamp (clouds_2, 0.0, 1.0) * ((0.4 + \n    ((vec3(tmpvar_8) * vec3(tmpvar_8)) * 0.8)\n  ) * 1.5));\n  ret_4 = (ret_4 * clamp ((1.0 - \n    (xlat_mutableret1.x * 4.0)\n  ), 0.0, 1.0));\n  ret_4 = (ret_4 + ((\n    ((vec3(tmpvar_8) * 0.1) * rand_preset.x)\n   * \n    (1.0 + rand_preset)\n  .xyz) * (uv_1.y + 0.5)));\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ret_4;\n  ret = tmpvar_9.xyz;\n }"}