{"baseVals":{"rating":1,"gammaadj":2.54,"decay":0.5,"echo_zoom":1.127,"wave_mode":6,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.005,"wave_scale":0.167,"wave_smoothing":0,"modwavealphastart":1,"modwavealphaend":1,"warpscale":0.107,"zoomexp":0.33077,"fshader":1,"zoom":0.9901,"warp":0.01,"wave_x":0.95,"wave_y":1,"ob_size":0.005,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":64,"mv_y":48,"mv_l":0,"mv_b":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":35,"additive":1,"thickoutline":1,"rad":0.07568,"tex_zoom":0.5033,"g2":0,"border_a":0},"init_eqs_str":"","frame_eqs_str":""},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.d=0;a.y1=0;a.w=0;a.ww=0;a.q12=0;a.q18=0;a.q13=0;a.q15=0;a.q6=0;a.q1=0;a.q5=0;a.q9=0;a.x=0;a.v=0;a.ww1=0;a.tt=0;a.vx=0;a.q11=0;a.q10=0;a.vy=0;a.q4=0;a.a=0;a.q16=0;a.w1=0;a.y=0;a.q19=0;a.q17=0;a.y2=0;a.bb=0;a.q2=0;a.q14=0;a.v1=0;a.q3=0;a.q7=0;a.v2=0;a.q20=0;a.q8=0;","frame_eqs_str":"a.w=a.w1;a.ww=-(a.y1-a.y2)*(1+2*(div(70,a.fps)-1))-.8*a.y1;a.w-=5*a.ww;a.q1=Math.cos(a.ww);a.q2=Math.sin(a.ww);a.q3=1.12;a.q4=.042*Math.sin(a.w);a.q5=.042*Math.cos(a.w);a.a=.5*Math.asin(1);a.d=.08;a.q6=Math.cos(a.a+0*a.ww);a.q7=Math.sin(a.a+0*a.ww);a.q8=3.3;a.q9=Math.cos(-a.w+Math.asin(1))*a.d*a.aspectx;a.q10=Math.sin(-a.w+Math.asin(1))*a.d*a.aspecty;a.q11=Math.cos(-a.a+0*a.ww);a.q12=Math.sin(-a.a+0*a.ww);a.q13=a.q8;a.q14=Math.cos(-a.w+Math.asin(1))*a.d*a.aspectx;a.q15=Math.sin(-a.w+\nMath.asin(1))*a.d*a.aspecty;a.bb=.97*a.bb+.04*a.bass;a.tt=.97*a.tt+.04*a.treb;a.w1+=a.ww1*a.a*.15;a.ww1=.94*a.ww1+.1*a.y1;a.q16=.2*(a.bb-a.tt);a.y1+=.1*a.v1;a.y2+=.2*a.v2;a.v1=.95*a.v1-.1*(a.y1-a.q16);a.v2=.99*a.v2-.2*(a.y2-a.y1);a.a=div(2.2*Math.abs(a.y2-a.y1),a.fps);a.q17=Math.sin(a.w)*a.a;a.q18=-Math.cos(a.w)*a.a;a.v=.25;a.x+=a.vx*a.v;a.y+=a.vy*a.v;a.vx=.98*a.vx+Math.sin(a.w)*a.a;a.vy=.98*a.vy-Math.cos(a.w)*a.a;a.q19=.5*a.x;a.q20=.5*a.y;a.monitor=a.cx;","pixel_eqs_str":"","pixel_eqs":"","warp":"vec2 xlat_mutablefactorA;\n shader_body { \n  vec3 ret_1;\n  xlat_mutablefactorA = ((uv_orig - 0.5) * aspect.xy);\n  vec2 tmpvar_2;\n  tmpvar_2.x = ((xlat_mutablefactorA.x * q1) - (xlat_mutablefactorA.y * q2));\n  tmpvar_2.y = ((xlat_mutablefactorA.x * q2) + (xlat_mutablefactorA.y * q1));\n  vec2 tmpvar_3;\n  tmpvar_3.x = q4;\n  tmpvar_3.y = q5;\n  vec2 tmpvar_4;\n  tmpvar_4.x = ((xlat_mutablefactorA.x * q6) - (xlat_mutablefactorA.y * q7));\n  tmpvar_4.y = ((xlat_mutablefactorA.x * q7) + (xlat_mutablefactorA.y * q6));\n  vec2 tmpvar_5;\n  tmpvar_5.x = q9;\n  tmpvar_5.y = q10;\n  vec2 tmpvar_6;\n  tmpvar_6.x = ((xlat_mutablefactorA.x * q11) - (xlat_mutablefactorA.y * q12));\n  tmpvar_6.y = ((xlat_mutablefactorA.x * q12) + (xlat_mutablefactorA.y * q11));\n  vec2 tmpvar_7;\n  tmpvar_7.x = q14;\n  tmpvar_7.y = q15;\n  ret_1.x = (max (texture (sampler_main, clamp (\n    ((0.5 + ((tmpvar_2 * aspect.zw) * q3)) + (tmpvar_3 * aspect.zw))\n  , 0.0, 1.0)).x, max (texture (sampler_main, \n    clamp (((0.5 + (\n      (tmpvar_4 * aspect.zw)\n     * q8)) + tmpvar_5), 0.0, 1.0)\n  ).x, texture (sampler_main, \n    clamp (((0.5 + (\n      (tmpvar_6 * aspect.zw)\n     * q13)) + tmpvar_7), 0.0, 1.0)\n  ).x)) - 0.004);\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = ret_1;\n  ret = tmpvar_8.xyz;\n }","comp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1.x = q19;\n  tmpvar_1.y = q20;\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = texture (sampler_main, fract(((0.5 + \n    (uv - 0.5)\n  ) + (tmpvar_1 * vec2(-1.0, 1.0))))).xxx;\n  ret = tmpvar_2.xyz;\n }"}