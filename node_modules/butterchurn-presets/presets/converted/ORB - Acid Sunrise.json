{"baseVals":{"rating":0,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":7,"solarize":1,"wave_a":0.001,"warp":0.01,"wave_r":0,"wave_g":0.4,"wave_b":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"textured":1,"rad":2.66718,"tex_zoom":0.37742,"g":1,"b":1,"a":0.8,"g2":0,"a2":0.4},"init_eqs_str":"","frame_eqs_str":"a.tex_ang=-.01;"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":1,"sides":100,"g":1,"b":1,"a":0.8,"a2":0.6,"border_r":0,"border_g":0,"border_b":0},"init_eqs_str":"a.q3=0;a.q3=0;a.q3=0;a.q3=0;a.q3=0;a.q3=0;a.q3=0;a.q3=0;a.q5=0;","frame_eqs_str":"a.r2=.24*Math.sin(.178*a.q3);a.g2=.24*Math.sin(.138*a.q3);a.b2=.24*Math.sin(.118*a.q3);a.r=.24*Math.sin(.158*a.q3);a.g=.24*Math.sin(.258*a.q3);a.b=.24*Math.sin(.41*a.q3);a.x=.5+.01*Math.sin(a.q3);a.y=.5+.01*Math.cos(a.q3)*a.q5;"},{"baseVals":{"enabled":1,"sides":100,"a":0.8,"a2":0.6},"init_eqs_str":"a.q3=0;a.q3=0;a.q3=0;a.q3=0;a.q3=0;a.q3=0;","frame_eqs_str":"a.r2=.24*Math.sin(.258*a.q3);a.g2=.24*Math.sin(.158*a.q3);a.b2=.24*Math.sin(.108*a.q3);a.r=.24*Math.sin(.158*a.q3);a.g=.24*Math.sin(.258*a.q3);a.b=.24*Math.sin(.11*a.q3);"}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.basstime=0;a.q2=0;a.q1=0;a.othertime=0;a.q3=0;a.basstime=.1*randint(1E3);a.othertime=.1*randint(1E3);","frame_eqs_str":"a.basstime+=.0003*a.bass;a.q2=a.basstime;a.q1=.00001*a.basstime;a.othertime+=.03*a.bass;a.q3=a.othertime;","pixel_eqs_str":"a.zoom=1;a.rot=0;","warp":" shader_body { \n  float final_noise_1;\n  vec3 tmpvar_2;\n  tmpvar_2.xy = uv;\n  tmpvar_2.z = (q2 * 10.0);\n  final_noise_1 = ((texture (sampler_noisevol_lq, tmpvar_2) * 2.0) - 1.0).x;\n  final_noise_1 = (final_noise_1 + (0.5 * (\n    (texture (sampler_noisevol_lq, (tmpvar_2 * 2.0)) * 2.0)\n   - 1.0)).x);\n  final_noise_1 = (final_noise_1 + (0.25 * (\n    (texture (sampler_noisevol_lq, (tmpvar_2 * 4.0)) * 2.0)\n   - 1.0)).x);\n  final_noise_1 = (final_noise_1 + (0.125 * (\n    (texture (sampler_noisevol_lq, (tmpvar_2 * 8.0)) * 2.0)\n   - 1.0)).x);\n  final_noise_1 = ((final_noise_1 + 1.0) * 0.5);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = texture (sampler_main, (((\n    (uv - 0.5)\n   * 1.5) * final_noise_1) + 0.5)).xyz;\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  ret_1 = (mix (texture (sampler_main, uv).xyz, texture (sampler_main, (\n    (0.5 - uv)\n   + 0.5)).xyz, vec3(0.5, 0.5, 0.5)) * 2.0);\n  ret_1 = (1.0 - (1.0 - (\n    (ret_1 * (1.0 - ret_1))\n   * 4.0)));\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ret_1;\n  ret = tmpvar_2.xyz;\n }"}