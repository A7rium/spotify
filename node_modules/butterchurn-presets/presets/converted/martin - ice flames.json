{"baseVals":{"rating":2,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_brighten":0,"darken":1,"wave_a":0.002,"wave_scale":0.14,"wave_smoothing":0,"wave_mystery":-0.84,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_g":0,"wave_b":0.6,"ob_r":1,"ob_g":1,"ob_b":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":0,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":23,"textured":1,"rad":0.72143,"tex_ang":0.62832,"tex_zoom":0.0402,"g":1,"b":1,"a":0.9,"r2":0.9,"b2":1,"a2":0.3,"border_a":0},"init_eqs_str":"a.vis=0;a.q27=0;a.q22=0;","frame_eqs_str":"a.vis=div(bnot(mod(a.q27,8))*a.q22,2);a.vis=Math.min(a.vis,1);a.a=div(a.vis,2);a.a2=div(a.vis,2);a.tex_zoom=1;a.rad=.3*a.vis;"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":1,"sides":5,"additive":1,"num_inst":4,"x":0.9,"rad":0.24732,"tex_zoom":0.40839,"g":0.6,"a":0.4,"g2":0,"b2":0.6,"border_a":0},"init_eqs_str":"a.blue=0;a.ampl=0;a.steps=0;a.k1=0;a.q24=0;a.green=0;a.red=0;a.trig=0;a.q27=0;a.q28=0;","frame_eqs_str":"a.steps=a.q28+1;a.steps=4;a.ampl=.2;a.x=.5+a.ampl*Math.cos(6.28*(div(a.q27,a.steps)+div(a.instance,4)));a.y=.5+a.ampl*Math.sin(6.28*(div(a.q27,a.steps)+div(a.instance,4)));a.a=.4;a.a2=0;a.trig=a.q24*bnot(mod(a.q27,4));a.red=bnot(a.trig)*a.red+div(randint(100),100)*a.trig;a.green=bnot(a.trig)*a.green+div(randint(100),100)*a.trig;a.blue=bnot(a.trig)*a.blue+div(randint(100),100)*a.trig;a.k1=div(a.instance,a.num_inst);a.r=a.red*a.k1;a.g=a.green*(1-a.k1);a.b=4*a.blue*a.k1*(1-a.k1);\na.r=a.red;a.g=a.green;a.b=a.blue;a.r2=a.r;a.b2=a.b;a.g2=a.g;"},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.index2=0;a.index=0;a.q22=0;a.q21=0;a.q1=0;a.dec_med=0;a.q5=0;a.index3=0;a.rott=0;a.is_beat=0;a.q31=0;a.q23=0;a.k1=0;a.q24=0;a.dec_slow=0;a.q4=0;a.q26=0;a.p2=0;a.avg=0;a.stag=0;a.beat=0;a.p1=0;a.peak=0;a.q2=0;a.q27=0;a.drot=0;a.p3=0;a.q3=0;a.t0=0;a.q32=0;a.q28=0;a.q30=0;a.q20=0;a.p4=0;","frame_eqs_str":"a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.99,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.1+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,12);a.index2=mod(a.index2+a.is_beat*bnot(a.index),4);a.index3=mod(a.index3+a.is_beat*bnot(a.index)*bnot(a.index2),3);a.q20=a.avg;a.q21=\na.beat;a.q22=a.peak;a.q23=a.index;a.q24=a.is_beat;a.q26=a.bass+a.mid+a.treb;a.q27=a.index+1;a.q28=a.index2;a.k1=a.is_beat*equal(mod(a.index,2),0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_med*a.p2+(1-a.dec_med)*a.p1;a.rott=div(3.1416*a.p2,4);a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.q3=-a.q2;a.q4=a.q1;a.q5=.01*a.q1;a.drot=div(30*(mod(a.index,4)-2),a.fps);a.p3=a.p3*a.dec_slow+div(30*(1-a.dec_slow),a.fps)*a.drot;a.q30=a.p3;a.stag=a.q27+1*a.index2;a.stag=Math.max(a.stag,1);a.p4=a.dec_med*a.p4+\n(1-a.dec_med)*a.stag;a.q31=a.p4;a.zoom=1+.05*a.q1;a.rot=-.007*a.index;a.q32=pow(.996,div(30,a.fps));a.monitor=a.index2;","pixel_eqs_str":"a.dy=-.005;","warp":" shader_body { \n  vec2 uv_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = (uv - vec2(0.5, 0.5));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 0.0;\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_blur1, uv);\n  tmpvar_3.xyz = ((tmpvar_4.xyz * scale1) + bias1);\n  float tmpvar_5;\n  tmpvar_5 = (dot (tmpvar_3, roam_sin) * 8.0);\n  mat2 tmpvar_6;\n  tmpvar_6[uint(0)].x = cos(tmpvar_5);\n  tmpvar_6[uint(0)].y = -(sin(tmpvar_5));\n  tmpvar_6[1u].x = sin(tmpvar_5);\n  tmpvar_6[1u].y = cos(tmpvar_5);\n  uv_1 = (((tmpvar_2 + \n    ((0.2 * dot ((\n      (tmpvar_4.xyz * scale1)\n     + bias1), vec3(0.32, 0.49, 0.29))) * (tmpvar_2 * tmpvar_6))\n  ) - 0.5) + q5);\n  vec2 tmpvar_7;\n  tmpvar_7 = ((uv_1 * texsize.xy) * 0.02);\n  vec2 tmpvar_8;\n  tmpvar_8.x = (cos((tmpvar_7.y * q1)) * sin(-(tmpvar_7.y)));\n  tmpvar_8.y = (sin(tmpvar_7.x) * cos((tmpvar_7.y * q2)));\n  uv_1 = (uv_1 - ((tmpvar_8 * texsize.zw) * 12.0));\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ((texture (sampler_main, uv_1).xyz * 0.99) - 0.01);\n  ret = tmpvar_9.xyz;\n }","comp":"vec3 xlat_mutableret1;\nvec2 xlat_mutablers;\nvec2 xlat_mutableuv1;\nfloat xlat_mutablez;\n shader_body { \n  xlat_mutableuv1 = ((uv - 0.5) * aspect.xy);\n  xlat_mutablez = (8.0 / pow (xlat_mutableuv1.y, 0.05));\n  xlat_mutablers.x = (xlat_mutableuv1.x * xlat_mutablez);\n  xlat_mutablers.y = ((xlat_mutablez / 2.0) + time);\n  vec4 tmpvar_1;\n  tmpvar_1 = texture (sampler_noise_hq, xlat_mutablers);\n  xlat_mutableret1 = ((tmpvar_1.xyz * vec3(\n    greaterThanEqual (tmpvar_1.xyz, vec3(0.0, 0.0, 0.0))\n  )) - 0.5);\n  vec2 tmpvar_2;\n  tmpvar_2 = fract(((xlat_mutableuv1 - 0.5) - (\n    (xlat_mutableret1 * 0.1)\n   * \n    clamp ((xlat_mutableuv1.y * 32.0), 0.0, 1.0)\n  ).xy));\n  vec2 tmpvar_3;\n  tmpvar_3.x = (1.0 - tmpvar_2.x);\n  tmpvar_3.y = tmpvar_2.y;\n  vec3 tmpvar_4;\n  tmpvar_4 = (texture (sampler_main, tmpvar_2) + texture (sampler_main, tmpvar_3)).xyz;\n  xlat_mutableret1 = tmpvar_4;\n  xlat_mutableuv1 = (xlat_mutableuv1 * aspect.xy);\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = ((tmpvar_4 * (1.0 + \n    dot (tmpvar_4, vec3(0.32, 0.49, 0.29))\n  )) / 3.0);\n  ret = tmpvar_5.xyz;\n }"}