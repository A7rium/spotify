{"baseVals":{"rating":5,"gammaadj":1.14,"decay":1,"echo_zoom":1,"wave_mode":5,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.001,"wave_scale":1.601,"wave_smoothing":0,"wave_mystery":0.3,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"zoom":1.08069,"warp":0.01,"sx":0.99983,"wave_g":0,"wave_b":0,"ob_size":0,"ob_a":0.8,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":0,"mv_y":0,"mv_l":1,"mv_g":0.91,"mv_b":0.71,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":63,"rad":0.01,"ang":3.4054,"tex_ang":3.1415,"tex_zoom":1.6446,"r":0,"a":0.4,"g2":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"a.q3=0;","frame_eqs_str":"a.rad+=.1*a.q3;"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"a.q12=0;a.q18=0;a.q6=0;a.bass_thresh=0;a.wg=0;a.q11=0;a.q10=0;a.wb=0;a.q17=0;a.vol=0;a.q2=0;a.q3=0;a.wr=0;a.q7=0;a.mtime=0;a.q8=0;","frame_eqs_str":"a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*(.91*(a.bass_thresh-1.3)+1.3);a.wave_r=.5+.5*(.6*Math.sin(1.3*a.time)+.4*Math.sin(.98*a.time));a.wave_b=.5+.5*(.6*Math.sin(1.1*a.time)+.4*Math.sin(.78*a.time));a.wave_g=.5+.5*(.6*Math.sin(1.2*a.time)+.4*Math.sin(.6*a.time));a.q8=a.wave_r;a.q7=a.wave_b;a.q6=a.wave_g;a.wr=.5+.4*(.6*Math.sin(.2*a.time)+.4*Math.sin(.8*a.time));a.wb=.5+.4*(.6*Math.sin(.377*a.time)+.4*Math.sin(.5*a.time));a.wg=.5+\n.4*(.6*Math.sin(.7*a.time)+.4*Math.sin(.4*a.time));a.q10=a.wr;a.q11=a.wb;a.q12=a.wg;a.q18=.01*Math.sin(.1*a.time);a.q17=-.01*Math.sin(.254*a.time);a.q2=a.bass_thresh;a.vol=.25*(a.bass+a.mid+a.treb);a.vol*=a.vol;a.q3=a.vol;a.mtime+=.01*a.vol;a.q2=.25*a.mtime;a.wave_x+=.5*Math.sin(a.mtime);a.wave_y-=.5*Math.cos(1.4*a.mtime);","pixel_eqs_str":"","pixel_eqs":"","warp":" shader_body { \n  vec3 noise2_1;\n  vec3 ret_2;\n  vec3 tmpvar_3;\n  tmpvar_3 = (((texture (sampler_blur2, uv).xyz * scale2) + bias2) + texture (sampler_main, uv).xyz);\n  vec2 tmpvar_4;\n  tmpvar_4 = (0.5 + ((uv - 0.5) * (1.0 + \n    (tmpvar_3.y * 0.05)\n  )));\n  vec2 tmpvar_5;\n  tmpvar_5.x = (tmpvar_4.x + pow (tmpvar_3.x, q17));\n  tmpvar_5.y = (tmpvar_4.y + pow (tmpvar_3.x, q18));\n  vec4 tmpvar_6;\n  tmpvar_6 = texture (sampler_fc_main, fract(tmpvar_5));\n  vec3 tmpvar_7;\n  tmpvar_7.x = q8;\n  tmpvar_7.y = q7;\n  tmpvar_7.z = q6;\n  vec3 tmpvar_8;\n  tmpvar_8.x = q10;\n  tmpvar_8.y = q11;\n  tmpvar_8.z = q12;\n  noise2_1 = (texture (sampler_noise_lq, ((\n    (uv_orig * texsize.xy)\n   * texsize_noise_lq.zw) + rand_frame.xy)).xyz + mix (tmpvar_7, tmpvar_8, vec3(rad)));\n  vec3 a_9;\n  a_9 = (1.0 - tmpvar_6.xyz);\n  ret_2 = (tmpvar_6.xyz + (0.3 * clamp (\n    ((a_9.yzx * noise2_1.zxy) - (a_9.zxy * noise2_1.yzx))\n  , 0.0, 1.0)));\n  ret_2 = (ret_2 * 0.97);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = ret_2;\n  ret = tmpvar_10.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  ret_1 = (texture (sampler_main, uv).xyz * vec3(0.8, 0.2, 0.4));\n  ret_1 = (ret_1 * 1.14);\n  ret_1 = (ret_1 * ret_1);\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ret_1;\n  ret = tmpvar_2.xyz;\n }"}